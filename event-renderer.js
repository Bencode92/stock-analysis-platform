/**
 * event-renderer.js
 * Script pour le rendu des √©v√©nements - Version corrig√©e pour r√©soudre les probl√®mes de filtrage
 */

// Variable globale pour suivre si l'initialisation a d√©j√† eu lieu
window.eventInitialized = false;

document.addEventListener('DOMContentLoaded', function() {
  console.log('üîÑ Chargement du event-renderer.js - Version am√©lior√©e');
  
  // √âviter l'initialisation multiple
  if (window.eventInitialized) return;
  window.eventInitialized = true;

  console.log('üöÄ Initialisation du gestionnaire d\'√©v√©nements...');
  
  // 1. D'abord, injecter des styles prioritaires pour garantir l'apparence des √©v√©nements
  injectPriorityStyles();
  
  // 2. Attendre que tout soit charg√©, puis prendre le contr√¥le
  setTimeout(() => {
    initializeEventsManager();
  }, 500);
});

/**
 * Initialise ou r√©initialise le gestionnaire d'√©v√©nements
 */
function initializeEventsManager() {
  // Supprimer toute instance existante de EventsManager
  if (window.eventsManager) {
    delete window.eventsManager;
  }
  
  // Initialiser un nouveau gestionnaire d'√©v√©nements unifi√©
  window.eventsManager = new EventsManager();
  
  // IMPORTANT: Modifier la m√©thode renderEvents pour ajouter data-type
  const originalRenderEvents = window.eventsManager.renderEvents;
  window.eventsManager.renderEvents = function() {
    console.log('üìä Rendu des √©v√©nements...');
    
    // Avant le rendu, supprimer les doublons bas√©s sur le titre
    if (this.events && Array.isArray(this.events) && this.events.length > 0) {
      const uniqueEvents = [];
      const seenTitles = new Set();
      
      this.events.forEach(event => {
        if (event.title && !seenTitles.has(event.title)) {
          seenTitles.add(event.title);
          uniqueEvents.push(event);
        }
      });
      
      console.log(`üîç Suppression des doublons: ${this.events.length} ‚Üí ${uniqueEvents.length} √©v√©nements uniques`);
      this.events = uniqueEvents;
    }
    
    // Appeler la m√©thode originale
    originalRenderEvents.call(this);
    
    // IMPORTANT: Ajouter data-type √† chaque √©v√©nement APR√àS le rendu
    console.log('üè∑Ô∏è Application des attributs data-type aux √©v√©nements...');
    const eventCards = document.querySelectorAll('.event-card');
    console.log(`üîç ${eventCards.length} cartes d'√©v√©nements trouv√©es pour l'assignation des attributs`);
    
    if (eventCards.length === 0) {
      console.warn('‚ö†Ô∏è Aucune carte d\'√©v√©nement trouv√©e, v√©rifier le rendu initial');
      return;
    }
    
    eventCards.forEach((card, index) => {
      try {
        // S'assurer que nous avons des donn√©es d'√©v√©nement
        if (this.events && index < this.events.length) {
          const event = this.events[index];
          
          // Normaliser le type d'√©v√©nement
          let eventType = (event.type || 'economic').toLowerCase();
          
          // Convertir 'merger' en 'm&a' pour correspondre aux filtres
          if (eventType === 'merger' || eventType === 'acquisition') {
            eventType = 'm&a';
          }
          
          // Appliquer data-type de mani√®re visible et tra√ßable
          console.log(`üîñ √âv√©nement #${index+1}: Type=${eventType}, Titre=${event.title?.substring(0, 30) || 'Sans titre'}`);
          
          // TOUJOURS remplacer l'attribut existant pour s'assurer qu'il est √† jour
          card.setAttribute('data-type', eventType);
          
          // Ajouter √©galement une classe pour un d√©bogage visuel
          card.classList.add(`event-type-${eventType}`);
          
          // Garantir que la date est disponible pour les filtres de date
          if (!card.querySelector('.event-date') && event.date) {
            const dateEl = document.createElement('span');
            dateEl.className = 'event-date';
            dateEl.style.display = 'none'; // Invisible mais utilis√© pour le filtrage
            dateEl.textContent = event.date;
            card.appendChild(dateEl);
          }
          
          // Ajouter un attribut data-title pour faciliter le d√©bogage
          if (event.title) {
            card.setAttribute('data-title', event.title);
          }
        } else {
          console.warn(`‚ö†Ô∏è Pas de donn√©es pour la carte d'√©v√©nement #${index+1}`);
        }
      } catch (error) {
        console.error(`‚ùå Erreur lors de l'application data-type √† la carte #${index+1}:`, error);
      }
    });
    
    // Informer que les √©v√©nements sont pr√™ts pour le filtrage
    console.log('‚úÖ Attributs data-type appliqu√©s, √©v√©nements pr√™ts pour le filtrage');
    
    // D√©clencher un √©v√©nement personnalis√© pour informer que les √©v√©nements sont pr√™ts
    document.dispatchEvent(new CustomEvent('events-ready', { 
      detail: { 
        count: eventCards.length
      } 
    }));
  };
  
  // Initialiser le gestionnaire
  window.eventsManager.init();
  console.log('‚úÖ Gestionnaire d\'√©v√©nements initialis√© avec succ√®s');
  
  // Cr√©er une fonction de diagnostic global
  window.diagEvents = function() {
    const eventCards = document.querySelectorAll('.event-card');
    
    console.group('üìä Diagnostic des √©v√©nements');
    console.log(`Nombre total d'√©v√©nements: ${eventCards.length}`);
    
    const countByType = {};
    const hiddenEvents = [];
    const eventsWithoutType = [];
    
    eventCards.forEach((card, index) => {
      const type = card.getAttribute('data-type');
      const title = card.getAttribute('data-title') || card.querySelector('h3')?.textContent || `√âv√©nement #${index+1}`;
      const isHidden = window.getComputedStyle(card).display === 'none';
      
      // Compter par type
      countByType[type] = (countByType[type] || 0) + 1;
      
      // √âv√©nements cach√©s
      if (isHidden) {
        hiddenEvents.push({index, title, type});
      }
      
      // √âv√©nements sans type
      if (!type) {
        eventsWithoutType.push({index, title});
      }
    });
    
    console.log('Types d\'√©v√©nements:', countByType);
    console.log('√âv√©nements cach√©s:', hiddenEvents.length > 0 ? hiddenEvents : 'Aucun');
    console.log('√âv√©nements sans type:', eventsWithoutType.length > 0 ? eventsWithoutType : 'Aucun');
    
    console.log('Filtres actifs:');
    if (window.EventFilters) {
      console.log('- Cat√©gorie:', window.EventFilters.state.categoryFilter);
      console.log('- Date:', window.EventFilters.state.dateFilter);
    } else {
      console.log('‚ùå EventFilters non initialis√©');
    }
    
    console.groupEnd();
    
    return {
      total: eventCards.length,
      byType: countByType,
      hidden: hiddenEvents,
      withoutType: eventsWithoutType
    };
  };
}

/**
 * Injecte des styles CSS prioritaires qui surchargeront tout autre style
 */
function injectPriorityStyles() {
  // V√©rifier si les styles sont d√©j√† inject√©s
  if (document.getElementById('events-priority-styles')) return;
  
  const styleEl = document.createElement('style');
  styleEl.id = 'events-priority-styles';
  
  styleEl.textContent = `
    /* Styles prioritaires pour les cartes d'√©v√©nements */
    .event-card {
      position: relative !important;
      height: 180px !important;
      display: flex !important;
      flex-direction: column !important;
      overflow: hidden !important;
      margin-bottom: 0.75rem !important;
      background-color: rgba(1, 22, 39, 0.8) !important;
      transition: all 0.3s ease !important;
      border-radius: 0.5rem !important;
    }
    
    .event-card:hover {
      transform: translateY(-3px) !important;
      box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2) !important;
      border-color: rgba(0, 255, 135, 0.3) !important;
    }
    
    /* Indicateur d'impact plus visible */
    .event-card::before {
      content: '' !important;
      position: absolute !important;
      top: 0 !important;
      left: 0 !important;
      width: 5px !important;
      height: 100% !important;
    }
    
    .event-card.high-impact::before {
      background: linear-gradient(to bottom, #ff3d00, #ff7043) !important;
      box-shadow: 0 0 10px rgba(255, 61, 0, 0.7) !important;
    }
    
    .event-card.medium-impact::before {
      background: linear-gradient(to bottom, #ff9100, #ffb74d) !important;
      box-shadow: 0 0 10px rgba(255, 145, 0, 0.6) !important;
    }
    
    .event-card.low-impact::before {
      background: linear-gradient(to bottom, #00e676, #69f0ae) !important;
      box-shadow: 0 0 10px rgba(0, 230, 118, 0.6) !important;
    }
    
    /* Indicateurs visuels par type pour le d√©bogage */
    .event-type-economic::after {
      content: "economic";
      position: absolute;
      top: 5px;
      right: 5px;
      background: rgba(0, 100, 255, 0.3);
      color: white;
      font-size: 10px;
      padding: 2px 5px;
      border-radius: 3px;
    }
    
    .event-type-ipo::after {
      content: "ipo";
      position: absolute;
      top: 5px;
      right: 5px;
      background: rgba(255, 100, 0, 0.3);
      color: white;
      font-size: 10px;
      padding: 2px 5px;
      border-radius: 3px;
    }
    
    .event-type-m\\&a::after {
      content: "m&a";
      position: absolute;
      top: 5px;
      right: 5px;
      background: rgba(100, 200, 0, 0.3);
      color: white;
      font-size: 10px;
      padding: 2px 5px;
      border-radius: 3px;
    }
    
    /* Badge essentiel am√©lior√© */
    .essential-badge {
      position: absolute !important;
      top: 10px !important;
      right: 10px !important;
      background: rgba(0, 255, 135, 0.3) !important;
      color: #00ff87 !important;
      padding: 4px 8px !important;
      font-size: 0.7rem !important;
      border-radius: 4px !important;
      font-weight: 600 !important;
      letter-spacing: 0.5px !important;
      text-transform: uppercase !important;
      box-shadow: 0 0 12px rgba(0, 255, 135, 0.4) !important;
      animation: pulse 2s infinite !important;
    }
    
    /* Espacement entre colonnes */
    .grid.grid-cols-1.md\\:grid-cols-3.gap-4 {
      gap: 1.5rem !important;
    }
    
    /* Boutons de filtre am√©lior√©s */
    #today-filter.active, 
    #week-filter.active {
      background-color: rgba(0, 255, 135, 0.2) !important;
      color: #00ff87 !important;
      border-color: #00ff87 !important;
      transform: translateY(-1px) !important;
      font-weight: 600 !important;
      box-shadow: 0 0 8px rgba(0, 255, 135, 0.3) !important;
    }
    
    /* Styles pour les filtres de cat√©gorie */
    #event-category-filters button.filter-active {
      background-color: rgba(0, 255, 135, 0.2) !important;
      color: #00ff87 !important;
      border-color: #00ff87 !important;
      font-weight: 600 !important;
    }
    
    /* Styles pour le message d'√©v√©nements vides */
    #no-events-message {
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 1.5rem;
      margin: 2rem 0;
      background: rgba(255, 255, 255, 0.05);
      border-radius: 0.5rem;
      color: #999;
      font-style: italic;
    }
    
    /* Animation pour fade-in */
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    .animate-fadeIn {
      animation: fadeIn 0.3s ease-out forwards;
    }
  `;
  
  document.head.appendChild(styleEl);
  console.log('‚úÖ Styles prioritaires inject√©s');
}

// G√©rer les retours √† la page via le cache
window.addEventListener('pageshow', function(event) {
  if (event.persisted) {
    console.log('‚ôªÔ∏è Page restaur√©e depuis le cache, r√©initialisation des √©v√©nements...');
    window.eventInitialized = false;
    
    // Relancer l'initialisation
    setTimeout(() => {
      if (!window.eventInitialized) {
        window.eventInitialized = true;
        
        // R√©initialiser les composants
        initializeEventsManager();
      }
    }, 500);
  }
});

// Ajouter une fonction de d√©bogage avanc√©e
window.debugEventFilters = function() {
  console.group('üîç Diagnostic complet du syst√®me de filtrage');
  
  // 1. √âtat du DOM
  const eventCards = document.querySelectorAll('.event-card');
  console.log(`1. Nombre d'√©v√©nements dans le DOM: ${eventCards.length}`);
  
  if (eventCards.length === 0) {
    console.warn('‚ùå Aucun √©v√©nement trouv√© dans le DOM!');
    console.groupEnd();
    return { error: 'No events found' };
  }
  
  // 2. V√©rifier les attributs data-type
  const typeStats = { withType: 0, withoutType: 0, typeCounts: {} };
  
  eventCards.forEach(card => {
    const type = card.getAttribute('data-type');
    if (type) {
      typeStats.withType++;
      typeStats.typeCounts[type] = (typeStats.typeCounts[type] || 0) + 1;
    } else {
      typeStats.withoutType++;
    }
  });
  
  console.log(`2. Attributs data-type: ${typeStats.withType} pr√©sents, ${typeStats.withoutType} manquants`);
  console.log('   Types d√©tect√©s:', typeStats.typeCounts);
  
  // 3. V√©rifier les √©l√©ments .event-date
  const dateStats = { withDate: 0, withoutDate: 0, formatOK: 0, formatError: 0 };
  const dateFormat = /^\d{2}\/\d{2}\/\d{4}$/;
  
  eventCards.forEach(card => {
    const dateEl = card.querySelector('.event-date');
    if (dateEl) {
      dateStats.withDate++;
      const dateText = dateEl.textContent.trim();
      if (dateFormat.test(dateText)) {
        dateStats.formatOK++;
      } else {
        dateStats.formatError++;
      }
    } else {
      dateStats.withoutDate++;
    }
  });
  
  console.log(`3. √âl√©ments .event-date: ${dateStats.withDate} pr√©sents, ${dateStats.withoutDate} manquants`);
  console.log(`   Format de date: ${dateStats.formatOK} correct, ${dateStats.formatError} incorrect`);
  
  // 4. √âtat des filtres
  console.log('4. √âtat du syst√®me de filtrage:');
  if (window.EventFilters) {
    console.log(`   - Filtres initialis√©s: ${window.EventFilters.state.initialized}`);
    console.log(`   - Filtre de date: ${window.EventFilters.state.dateFilter}`);
    console.log(`   - Filtre de cat√©gorie: ${window.EventFilters.state.categoryFilter}`);
  } else {
    console.error('   ‚ùå Syst√®me de filtrage non initialis√©!');
  }
  
  // 5. Boutons de filtre
  const todayFilter = document.querySelector('#today-filter');
  const weekFilter = document.querySelector('#week-filter');
  const categoryFilters = document.querySelectorAll('#event-category-filters button');
  
  console.log('5. Boutons de filtre:');
  console.log(`   - Filtre "Aujourd'hui": ${todayFilter ? 'Pr√©sent' : 'Manquant'}`);
  console.log(`   - Filtre "Cette semaine": ${weekFilter ? 'Pr√©sent' : 'Manquant'}`);
  console.log(`   - Filtres de cat√©gorie: ${categoryFilters.length} boutons trouv√©s`);
  
  // 6. Affichage des √©v√©nements
  const visibleEvents = [...eventCards].filter(e => window.getComputedStyle(e).display !== 'none');
  
  console.log(`6. Affichage: ${visibleEvents.length} visibles, ${eventCards.length - visibleEvents.length} cach√©s`);
  
  // 7. Recommandations
  console.log('7. Recommandations:');
  
  if (typeStats.withoutType > 0) {
    console.warn('   ‚ö†Ô∏è Certains √©v√©nements n\'ont pas d\'attribut data-type. Ex√©cuter window.forceFilter() pour les corriger.');
  }
  
  if (dateStats.withoutDate > 0) {
    console.warn('   ‚ö†Ô∏è Certains √©v√©nements n\'ont pas d\'√©l√©ment .event-date. Ex√©cuter window.forceFilter() pour les corriger.');
  }
  
  if (!window.EventFilters || !window.EventFilters.state.initialized) {
    console.error('   ‚ùå Le syst√®me de filtrage n\'est pas initialis√©. Recharger la page ou ex√©cuter initializeFilters().');
  }
  
  console.groupEnd();
  
  return {
    events: eventCards.length,
    types: typeStats,
    dates: dateStats,
    visible: visibleEvents.length,
    filters: window.EventFilters ? window.EventFilters.state : null
  };
};
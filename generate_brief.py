"""
generate_brief.py - G√©n√©rateur de brief strat√©gique pour TradePulse
Ce script analyse les donn√©es financi√®res via GPT pour produire un r√©sum√© strat√©gique
utilis√© ensuite par le g√©n√©rateur de portefeuilles.
"""

import os
import json
import requests
import datetime
import logging
import locale
from dotenv import load_dotenv

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Configuration de la locale fran√ßaise pour les dates
try:
    locale.setlocale(locale.LC_TIME, 'fr_FR.UTF-8')
except:
    try:
        locale.setlocale(locale.LC_TIME, 'fr_FR')
    except:
        logger.warning("‚ö†Ô∏è Impossible de configurer la locale fran√ßaise, utilisation de la locale par d√©faut")

# Chargement des cl√©s si local
load_dotenv()

# R√©cup√©ration de la cl√© API (environnement ou GitHub secrets)
API_KEY = os.environ.get("API_CHAT")
if not API_KEY:
    raise ValueError("La cl√© API OpenAI (API_CHAT) n'est pas d√©finie.")

# Paths
DATA_PATH = os.path.join(os.path.dirname(__file__), "data")
THEMES_PATH = os.path.join(DATA_PATH, "themes.json")
NEWS_PATH = os.path.join(DATA_PATH, "news.json")
BRIEF_PATH = os.path.join(DATA_PATH, "brief_ia.json")
BRIEF_MD_PATH = os.path.join(DATA_PATH, "brief_ia.md")

def load_json_data(file_path):
    """Charger des donn√©es depuis un fichier JSON avec gestion d'erreurs."""
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            data = json.load(file)
            logger.info(f"‚úÖ Donn√©es JSON charg√©es avec succ√®s depuis {file_path}")
            return data
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du chargement de {file_path}: {str(e)}")
        return {}

def call_openai_api(prompt):
    """Appel √† l'API OpenAI avec gestion d'erreurs et retry."""
    try:
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {API_KEY}"
        }
        
        data = {
            "model": "gpt-4o", # Utilisation de gpt-4o ou autre mod√®le disponible
            "messages": [{"role": "user", "content": prompt}],
            "temperature": 0.4
        }
        
        response = requests.post(
            "https://api.openai.com/v1/chat/completions",
            headers=headers,
            json=data
        )
        
        if response.status_code != 200:
            logger.error(f"‚ùå Erreur API OpenAI: {response.status_code} - {response.text}")
            raise Exception(f"Erreur API OpenAI: {response.status_code}")
            
        result = response.json()
        return result["choices"][0]["message"]["content"]
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'appel √† l'API OpenAI: {str(e)}")
        raise

def main():
    """Fonction principale pour g√©n√©rer le brief strat√©gique."""
    try:
        logger.info("üîç Chargement des donn√©es financi√®res...")
        
        # Chargement des fichiers JSON
        themes_data = load_json_data(THEMES_PATH)
        news_data = load_json_data(NEWS_PATH)
        
        # Validation des donn√©es
        if not themes_data or not news_data:
            logger.error("‚ùå Donn√©es incompl√®tes pour g√©n√©rer le brief")
            return
            
        # Regrouper toutes les actualit√©s (globales)
        all_news = []
        for category, articles in news_data.items():
            if isinstance(articles, list):
                all_news.extend(articles)
                logger.info(f"üì∞ {len(articles)} actualit√©s trouv√©es dans la cat√©gorie {category}")
        
        # V√©rification du nombre d'actualit√©s
        if not all_news:
            logger.error("‚ùå Aucune actualit√© trouv√©e. V√©rifiez le format de news.json")
            return
            
        logger.info(f"üìä Total: {len(all_news)} actualit√©s √† analyser")
        
        # AM√âLIORATION: Trier et filtrer les actualit√©s avec un seuil dynamique
        sorted_news = sorted(
            all_news, 
            key=lambda x: x.get("importance_score", 0) if "importance_score" in x 
                else x.get("score", 0),
            reverse=True
        )
        
        # Ne garder que les articles au-dessus d'un seuil raisonnable (ou au moins 15)
        news_cutoff = [n for n in sorted_news if n.get("importance_score", 0) >= 5 or n.get("score", 0) >= 5]
        top_news = news_cutoff[:50] if len(news_cutoff) >= 15 else sorted_news[:30]
        
        logger.info(f"üîù S√©lection de {len(top_news)} actualit√©s pertinentes")
        
        # Extraction des th√®mes dominants
        themes_weekly = themes_data.get("themes", {}).get("weekly", [])
        if not themes_weekly:
            logger.warning("‚ö†Ô∏è Aucun th√®me hebdomadaire trouv√©. V√©rifiez le format de themes.json")
            themes_section = "[]"
        else:
            themes_section = json.dumps(themes_weekly, indent=2, ensure_ascii=False)
            logger.info(f"üîç {len(themes_weekly)} th√®mes dominants identifi√©s")

        # Formatage de la date actuelle
        current_date = datetime.datetime.now()
        try:
            date_formatted = current_date.strftime('%d %B %Y')
        except:
            # Fallback si la locale fran√ßaise ne fonctionne pas
            month_names = {
                1: "janvier", 2: "f√©vrier", 3: "mars", 4: "avril", 5: "mai", 6: "juin",
                7: "juillet", 8: "ao√ªt", 9: "septembre", 10: "octobre", 11: "novembre", 12: "d√©cembre"
            }
            date_formatted = f"{current_date.day} {month_names[current_date.month]} {current_date.year}"

        # Construction du prompt expert AM√âLIOR√â avec analyse comportementale et perception + contexte temporel
        prompt = f"""
Tu es un strat√®ge senior en allocation d'actifs au sein d'une soci√©t√© de gestion de renom.

Tu re√ßois deux types de donn√©es financi√®res :
1. **Th√®mes dominants** extraits de plus de 100 articles √©conomiques (structur√©s par th√®me, r√©gion, secteur)
2. **Actualit√©s √† fort impact** (Top {len(top_news)} globales, scor√©es par importance)

üéØ **Objectif** : Produire un **brief strat√©gique √† destination d'un comit√© d'investissement**, clair, synth√©tique et orient√© allocation.

---

üóìÔ∏è Nous sommes la semaine du {date_formatted}. Tu peux utiliser cette information temporelle pour contextualiser tes sc√©narios (FOMC, √©ch√©ances, saison des r√©sultats...).

---

üéì **Tes missions** :

- Identifier les grandes **dynamiques macro, g√©opolitiques et sectorielles**
- D√©tailler **2 √† 3 sc√©narios macro probables** √† 3-12 mois, avec **leurs implications concr√®tes sur les classes d'actifs**
- Anticiper les **r√©actions probables des march√©s** (prixant d√©j√† certaines hypoth√®ses)
- D√©tecter des **d√©calages perception / r√©alit√©** : o√π les march√©s ou m√©dias se trompent-ils ?
- G√©n√©rer **des recommandations actionnables** sur l'allocation (secteurs, zones, classes d'actifs)

---

üìê **Structure du brief attendue** :

1. **Macro√©conomie** ‚Äì Tendances globales, sc√©narios, causalit√© √©conomique (ex : "Si X ‚áí alors Y ‚áí impact Z")
2. **March√©s** ‚Äì O√π en est-on dans le cycle ? Que price le march√© ? Quelles rotations sectorielles probables ?
3. **Secteurs** ‚Äì Surperformance / sous-performance attendue
4. **R√©gions cl√©s** ‚Äì √âtats-Unis, Europe, Asie, Emergents : quelles zones sur / sous-performent ?
5. **Implications pour l'investisseur** ‚Äì Synth√®se claire avec recommandations (actions value ? mati√®res premi√®res ? obligations longues ?)
6. üß† **Anticipations vs R√©alit√©** ‚Äì Mets en √©vidence 2 ou 3 endroits o√π la perception du march√© semble erron√©e, et ce que cela implique.

---

‚ö†Ô∏è **Niveau d'exigence** :

- Sois **strat√©gique et synth√©tique** (max ~800 tokens)
- Utilise des **cha√Ænes de raisonnement** (pas seulement des constats)
- Distingue **court terme (1-3 mois)** vs **moyen terme (6-12 mois)**
- Int√®gre la **composante comportementale** : que price d√©j√† le march√© ? quelles attentes sont risqu√©es ?
- N'oublie pas d'inclure une **conclusion avec 3 convictions majeures pour les 3 prochains mois**

---

üìÇ **Th√®mes dominants (30 derniers jours)** :
{themes_section}

üìÇ **Actualit√©s importantes (Top {len(top_news)} globales)** :
{json.dumps(top_news, indent=2, ensure_ascii=False)}

---

üß† Fournis maintenant le **brief strat√©gique complet**, directement exploitable par une √©quipe d'asset allocation.
"""
        
        logger.info("üß† G√©n√©ration du brief strat√©gique via OpenAI...")
        
        # Appel √† l'API OpenAI
        brief = call_openai_api(prompt)
        
        # Pr√©paration des donn√©es √† sauvegarder
        brief_data = {
            "brief": brief,
            "generated_at": datetime.datetime.now().isoformat(),
            "source": {
                "themes_count": len(themes_weekly),
                "news_count": len(top_news)
            }
        }
        
        # Assurez-vous que le r√©pertoire data existe
        os.makedirs(DATA_PATH, exist_ok=True)
        
        # Sauvegarde dans brief_ia.json
        with open(BRIEF_PATH, "w", encoding="utf-8") as f:
            json.dump(brief_data, f, ensure_ascii=False, indent=2)
        
        # Sauvegarde en format Markdown pour lisibilit√© humaine avec signature/disclaimer
        with open(BRIEF_MD_PATH, "w", encoding="utf-8") as f:
            f.write("# Brief Strat√©gique TradePulse\n\n")
            f.write(f"*G√©n√©r√© le {datetime.datetime.now().strftime('%d/%m/%Y √† %H:%M')}*\n\n")
            f.write(brief)
            f.write("\n\n---\n\n*Cette note est g√©n√©r√©e automatiquement par TradePulse AI, sur la base des actualit√©s et th√®mes d√©tect√©s dans les 7 derniers jours.*\n")
        
        logger.info(f"‚úÖ Brief strat√©gique g√©n√©r√© et sauvegard√©: {BRIEF_PATH} et {BRIEF_MD_PATH}")
        
        # Cr√©er un exemple de sortie pour le debug
        debug_dir = os.path.join(os.path.dirname(__file__), "debug")
        os.makedirs(debug_dir, exist_ok=True)
        debug_path = os.path.join(debug_dir, f"brief_ia_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.md")
        
        with open(debug_path, "w", encoding="utf-8") as f:
            f.write("# Brief Strat√©gique TradePulse - DEBUG\n\n")
            f.write(f"*G√©n√©r√© le {datetime.datetime.now().strftime('%d/%m/%Y √† %H:%M')}*\n\n")
            f.write("## Prompt envoy√©\n```\n")
            f.write(prompt)
            f.write("\n```\n\n## R√©sultat\n\n")
            f.write(brief)
            f.write("\n\n---\n\n*Cette note est g√©n√©r√©e automatiquement par TradePulse AI, sur la base des actualit√©s et th√®mes d√©tect√©s dans les 7 derniers jours.*\n")
        
        logger.info(f"üîç Version debug sauvegard√©e: {debug_path}")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur g√©n√©rale: {str(e)}")
        raise

if __name__ == "__main__":
    main()

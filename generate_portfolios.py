# NOUVELLE FONCTION: Extraction des actifs valides des donn√©es filtr√©es (en rempla√ßant l'ancienne)
def extract_valid_assets(filtered_etfs):
    """Extrait sp√©cifiquement les Top ETF et Top Obligations depuis les donn√©es filtr√©es"""
    valid_etfs = []
    valid_bonds = []
    
    # Identifier les sections sp√©cifiques d'ETF et d'obligations
    lines = filtered_etfs.split('\n')
    current_section = None
    
    for line in lines:
        # D√©tecter sp√©cifiquement les sections qui nous int√©ressent
        if "TOP ETF" in line.upper() or "TOP 50 ETF" in line.upper():
            current_section = "TOP_ETF"
            continue
        elif "ETF COURT TERME" in line.upper():
            current_section = "ETF_COURT_TERME"
            continue
        elif "TOP" in line.upper() and "OBLIGATION" in line.upper():
            current_section = "TOP_BOND"
            continue
            
        # Extraire les noms d'actifs (lignes commen√ßant par "‚Ä¢") pour les sections cibl√©es
        if line.startswith("‚Ä¢") and current_section:
            # Nettoyer pour extraire juste le nom (avant les ":")
            parts = line.split('‚Ä¢')[1].split(':')
            asset_name = parts[0].strip()
            
            if current_section in ["TOP_ETF", "ETF_COURT_TERME"]:
                valid_etfs.append(asset_name)
            elif current_section == "TOP_BOND":
                valid_bonds.append(asset_name)
    
    # V√©rifier si nous avons trouv√© suffisamment d'√©l√©ments
    min_required = 5  # Au moins 5 √©l√©ments dans chaque cat√©gorie
    
    print(f"üìä ETF trouv√©s: {len(valid_etfs)} (TOP ETF et court terme)")
    print(f"üìä Obligations trouv√©es: {len(valid_bonds)} (TOP Bonds)")
    
    # Si pas assez d'ETF trouv√©s, ajouter des valeurs par d√©faut
    if len(valid_etfs) < min_required:
        print("‚ö†Ô∏è Pas assez d'ETF trouv√©s dans les donn√©es filtr√©es, ajout de valeurs par d√©faut")
        default_etfs = [
            "Vanguard S&P 500 ETF", 
            "iShares MSCI World ETF", 
            "Invesco QQQ ETF",
            "SPDR Gold Shares ETF",
            "Vanguard Total Bond Market ETF",
            "iShares Core MSCI Emerging Markets ETF",
            "Vanguard FTSE Europe ETF",
            "ARK Innovation ETF",
            "Vanguard Dividend Appreciation ETF",
            "iShares MSCI Japan ETF"
        ]
        for etf in default_etfs:
            if etf not in valid_etfs:
                valid_etfs.append(etf)
    
    # Si pas assez d'obligations trouv√©es, ajouter des valeurs par d√©faut
    if len(valid_bonds) < min_required:
        print("‚ö†Ô∏è Pas assez d'obligations trouv√©es dans les donn√©es filtr√©es, ajout de valeurs par d√©faut")
        default_bonds = [
            "US Treasury 10Y", 
            "US Treasury 5Y", 
            "US Treasury 30Y",
            "German Bunds 10Y",
            "French OAT 10Y",
            "iShares Corporate Bond ETF",
            "SPDR Bloomberg High Yield Bond ETF",
            "Vanguard Total International Bond ETF",
            "PIMCO Total Return Bond Fund",
            "iShares iBoxx $ Investment Grade Corporate Bond ETF"
        ]
        for bond in default_bonds:
            if bond not in valid_bonds:
                valid_bonds.append(bond)
    
    print(f"‚úì Extraction r√©ussie apr√®s validation: {len(valid_etfs)} ETF et {len(valid_bonds)} obligations")
    return valid_etfs, valid_bonds
import os
import json
import requests
import datetime
import locale
from bs4 import BeautifulSoup
import re

def extract_content_from_html(html_file):
    """Extraire le contenu pertinent d'un fichier HTML."""
    try:
        with open(html_file, 'r', encoding='utf-8') as file:
            soup = BeautifulSoup(file, 'html.parser')
            
            # Extraire le contenu principal
            if html_file.endswith('actualites.html'):
                # Pour les actualit√©s, on cherche les articles de news
                articles = soup.select('.news-card, .article-item, .news-item')
                if not articles:
                    # Fallback: essayer de trouver d'autres √©l√©ments qui pourraient contenir des actualit√©s
                    articles = soup.select('article, .news, .actualite, .card')
                
                content = []
                for article in articles[:15]:  # Limiter aux 15 premiers articles pour √©viter un prompt trop long
                    title = article.select_one('h2, h3, .title, .headline')
                    summary = article.select_one('p, .summary, .description')
                    
                    if title:
                        title_text = title.get_text(strip=True)
                        if title_text:
                            content.append("‚Ä¢ {}".format(title_text))
                            if summary:
                                summary_text = summary.get_text(strip=True)
                                if summary_text:
                                    content.append("  {}...".format(summary_text[:150]))  # Limiter la longueur
            
            elif html_file.endswith('marche.html'):
                # Pour les march√©s, on cherche les donn√©es de tendance
                market_data = soup.select('.market-trend, .market-data, .trend-item, .index-card')
                if not market_data:
                    # Fallback
                    market_data = soup.select('.card, .market, .indice, .asset-card')
                
                content = []
                for item in market_data:
                    name = item.select_one('h3, h4, .name, .asset-name, .title')
                    value = item.select_one('.value, .price, .current-price')
                    change = item.select_one('.change, .variation, .performance')
                    
                    if name:
                        name_text = name.get_text(strip=True)
                        if name_text:
                            data_line = "‚Ä¢ {}".format(name_text)
                            if value:
                                value_text = value.get_text(strip=True)
                                data_line += ": {}".format(value_text)
                            if change:
                                change_text = change.get_text(strip=True)
                                data_line += " ({})".format(change_text)
                            content.append(data_line)
            
            elif html_file.endswith('secteurs.html'):
                # Pour les secteurs, on cherche les performances sectorielles
                sector_data = soup.select('.sector-card, .sector-item, .performance-card')
                if not sector_data:
                    # Fallback
                    sector_data = soup.select('.card, .sector, .industry-card, .industry-item')
                
                content = []
                content.append("üìä PERFORMANCES SECTORIELLES:")
                
                for item in sector_data:
                    name = item.select_one('h3, h4, .sector-name, .name, .title')
                    performance = item.select_one('.performance, .change, .variation')
                    trend = item.select_one('.trend, .direction, .recommendation')
                    
                    if name:
                        name_text = name.get_text(strip=True)
                        if name_text:
                            data_line = "‚Ä¢ {}".format(name_text)
                            if performance:
                                perf_text = performance.get_text(strip=True)
                                data_line += ": {}".format(perf_text)
                            if trend:
                                trend_text = trend.get_text(strip=True)
                                data_line += " - {}".format(trend_text)
                            content.append(data_line)
                
                # Si aucun secteur n'a √©t√© trouv√©, essayer d'extraire des tableaux
                if len(content) <= 1:
                    tables = soup.select('table')
                    for table in tables:
                        rows = table.select('tr')
                        for row in rows[1:6]:  # Skip header, limit to 5 rows
                            cols = row.select('td')
                            if len(cols) >= 2:
                                sector_name = cols[0].get_text(strip=True)
                                sector_perf = cols[1].get_text(strip=True) if len(cols) > 1 else ""
                                content.append("‚Ä¢ {}: {}".format(sector_name, sector_perf))
            
            elif html_file.endswith('liste.html'):
                # Pour les listes, on cherche les tableaux ou cartes d'actifs
                asset_items = soup.select('.asset-item, .watchlist-item, .stock-item, .list-card')
                if not asset_items:
                    # Fallback
                    asset_items = soup.select('.card, .item, tr, .asset')
                
                content = []
                content.append("üìã LISTES D'ACTIFS SURVEILL√âS:")
                
                for item in asset_items:
                    name = item.select_one('h3, h4, .asset-name, .name, .symbol, .title, td:first-child')
                    sector = item.select_one('.sector, .category, .type')
                    price = item.select_one('.price, .value, .current-price')
                    
                    if name:
                        name_text = name.get_text(strip=True)
                        if name_text:
                            data_line = "‚Ä¢ {}".format(name_text)
                            if sector:
                                sector_text = sector.get_text(strip=True)
                                data_line += " ({}): ".format(sector_text)
                            if price:
                                price_text = price.get_text(strip=True)
                                data_line += "{}".format(price_text)
                            content.append(data_line)
                
                # Si aucun actif n'a √©t√© trouv√©, essayer d'extraire des tableaux
                if len(content) <= 1:
                    tables = soup.select('table')
                    for table in tables:
                        rows = table.select('tr')
                        for row in rows[1:10]:  # Skip header, limit to 10 rows
                            cols = row.select('td')
                            if len(cols) >= 2:
                                asset_name = cols[0].get_text(strip=True)
                                asset_info = cols[1].get_text(strip=True) if len(cols) > 1 else ""
                                content.append("‚Ä¢ {}: {}".format(asset_name, asset_info))
            
            elif html_file.endswith('etf.html'):
                # Pour les ETFs, on cherche les cartes ou tableaux d'ETF
                etf_items = soup.select('.etf-card, .etf-item, .fund-card, .etf-table tr')
                if not etf_items:
                    # Fallback
                    etf_items = soup.select('.card, .etf, tr, .fund')
                
                content = []
                content.append("üìä ANALYSE DES ETF:")
                
                for item in etf_items:
                    name = item.select_one('h3, h4, .etf-name, .name, .symbol, .title, td:first-child')
                    category = item.select_one('.category, .type, .asset-class')
                    aum = item.select_one('.aum, .size, .assets')
                    expense = item.select_one('.expense, .ter, .fee')
                    
                    if name:
                        name_text = name.get_text(strip=True)
                        if name_text:
                            data_line = "‚Ä¢ {}".format(name_text)
                            if category:
                                category_text = category.get_text(strip=True)
                                data_line += " ({})".format(category_text)
                            if aum:
                                aum_text = aum.get_text(strip=True)
                                data_line += " AUM: {}".format(aum_text)
                            if expense:
                                expense_text = expense.get_text(strip=True)
                                data_line += ", Frais: {}".format(expense_text)
                            content.append(data_line)
                
                # Si aucun ETF n'a √©t√© trouv√©, essayer d'extraire des tableaux
                if len(content) <= 1:
                    tables = soup.select('table')
                    for table in tables:
                        rows = table.select('tr')
                        for row in rows[1:10]:  # Skip header, limit to 10 rows
                            cols = row.select('td')
                            if len(cols) >= 2:
                                etf_name = cols[0].get_text(strip=True)
                                etf_info = cols[1].get_text(strip=True) if len(cols) > 1 else ""
                                content.append("‚Ä¢ {}: {}".format(etf_name, etf_info))
            
            return "\n".join(content)
    except Exception as e:
        print("Erreur lors de l'extraction du contenu de {}: {}".format(html_file, str(e)))
        # En cas d'erreur, retourner un placeholder pour ne pas bloquer l'ex√©cution
        return "[Contenu non disponible pour {}]".format(html_file)

def get_current_month_fr():
    """Retourne le nom du mois courant en fran√ßais."""
    try:
        # Tenter de d√©finir la locale en fran√ßais
        locale.setlocale(locale.LC_TIME, 'fr_FR.UTF-8')
    except locale.Error:
        # Fallback si la locale fran√ßaise n'est pas disponible
        month_names = {
            1: "janvier", 2: "f√©vrier", 3: "mars", 4: "avril",
            5: "mai", 6: "juin", 7: "juillet", 8: "ao√ªt",
            9: "septembre", 10: "octobre", 11: "novembre", 12: "d√©cembre"
        }
        return month_names[datetime.datetime.now().month]
    
    # Obtenir le mois en fran√ßais
    return datetime.datetime.now().strftime('%B').lower()

def generate_portfolios(actualites, marche, secteurs, listes, etfs):
    """G√©n√®re trois portefeuilles optimis√©s en combinant les donn√©es fournies et le contexte actuel du march√©."""
    api_key = os.environ.get('API_CHAT')
    if not api_key:
        raise ValueError("La cl√© API OpenAI (API_CHAT) n'est pas d√©finie.")
    
    # Obtenir le mois courant en fran√ßais
    current_month = get_current_month_fr()
    
    prompt = f"""
Tu es un expert en gestion de portefeuille, avec une expertise en allocation strat√©gique et tactique. Tu vises √† maximiser le rendement ajust√© au risque en tenant compte de l'environnement macro√©conomique actuel.

Utilise :
- Les **donn√©es suivantes** :  
  üì∞ Actualit√©s financi√®res : {actualites}  
  üìà Tendances du march√© : {marche}  
  üè≠ Analyse sectorielle : {secteurs}  
  üìã Listes d'actifs surveill√©s : {listes}
  üìä Analyse des ETF : {etfs}
- Et **ton propre contexte actuel du march√©** (connaissances √† jour, tendances macro√©conomiques, comportements des investisseurs, mouvements des classes d'actifs).

üìÖ Contexte : Ces portefeuilles sont optimis√©s pour le mois de {current_month} en tenant compte des √©volutions √† court et moyen terme.

üéØ Ton objectif : G√©n√©rer trois portefeuilles optimis√©s :
1Ô∏è‚É£ **Agressif** : 10 √† 20 actifs tr√®s volatils (actions de croissance, crypto, ETF sp√©culatifs).  
2Ô∏è‚É£ **Mod√©r√©** : 10 √† 20 actifs √©quilibr√©s (blue chips, ETF diversifi√©s, obligations d'entreprises).  
3Ô∏è‚É£ **Stable** : 10 √† 20 actifs d√©fensifs (obligations souveraines, valeurs refuges, ETF stables).

üìä **Format attendu : JSON uniquement**
{{
  "Agressif": {{
    "Actions": {{
      "Nom": "X%",
      ...
    }},
    "Crypto": {{
      ...
    }},
    "ETF": {{
      ...
    }},
    "Obligations": {{
      ...
    }}
  }},
  "Mod√©r√©": {{ ... }},
  "Stable": {{ ... }}
}}

‚úÖ **Contraintes** :
- Chaque portefeuille contient **entre 10 et 20 actifs**.
- La somme des pourcentages fait **100%** par portefeuille.
- Chaque portefeuille inclut **au minimum deux classes d'actifs diff√©rentes**.
- L'allocation refl√®te √† la fois les donn√©es fournies **et** les tendances actuelles du march√©.
- Si un secteur est en forte croissance selon l'analyse sectorielle, surpond√®re-le dans les portefeuilles Agressif et Mod√©r√©.
- En cas d'incertitude macro√©conomique, renforce les allocations en actifs refuges dans le portefeuille Stable.
- Privil√©gie les ETF mentionn√©s dans la section ETF pour les allocations ETF.
- Utilise les actifs des listes de surveillance quand c'est pertinent.
- Les poids d'allocation sont exprim√©s en **% du portefeuille total**.
- Ne r√©ponds **qu'avec le JSON**, sans commentaire ni explication.
"""
    
    try:
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }
        
        data = {
            "model": "gpt-4o",
            "messages": [{"role": "user", "content": prompt}],
            "temperature": 0.7
        }
        
        response = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, json=data)
        response.raise_for_status()
        
        result = response.json()
        content = result["choices"][0]["message"]["content"]
        
        # Nettoyer la r√©ponse pour extraire seulement le JSON
        content = re.sub(r'^```json', '', content)
        content = re.sub(r'```$', '', content)
        content = content.strip()
        
        # V√©rifier que le contenu est bien du JSON valide
        portfolios = json.loads(content)
        return portfolios
    
    except Exception as e:
        print(f"Erreur lors de la g√©n√©ration des portefeuilles: {str(e)}")
        # En cas d'erreur, retourner un portfolio par d√©faut
        return {
            "Agressif": {
                "Actions": {"Apple": "15%", "Tesla": "10%", "Nvidia": "15%"},
                "Crypto": {"Bitcoin": "15%", "Ethereum": "10%"},
                "ETF": {"ARK Innovation ETF": "15%", "SPDR S&P 500 ETF": "10%"}
            },
            "Mod√©r√©": {
                "Actions": {"Microsoft": "15%", "Alphabet": "10%", "Johnson & Johnson": "10%"},
                "Obligations": {"US Treasury 10Y": "15%", "Corporate Bonds AAA": "15%"},
                "ETF": {"Vanguard Total Stock Market ETF": "20%", "iShares Core MSCI EAFE ETF": "15%"}
            },
            "Stable": {
                "Actions": {"Procter & Gamble": "10%", "Coca-Cola": "10%", "McDonald's": "10%"},
                "Obligations": {"US Treasury 30Y": "25%", "Municipal Bonds AAA": "15%"},
                "ETF": {"Vanguard High Dividend Yield ETF": "15%", "SPDR Gold Shares": "15%"}
            }
        }

def save_portfolios(portfolios):
    """Sauvegarder les portefeuilles dans un fichier JSON et conserver l'historique."""
    try:
        # Cr√©ation du dossier d'historique s'il n'existe pas
        history_dir = 'data/portfolio_history'
        os.makedirs(history_dir, exist_ok=True)
        
        # G√©n√©ration d'un horodatage pour le nom de fichier
        timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
        
        # Sauvegarder la version actuelle
        with open('portefeuilles.json', 'w', encoding='utf-8') as file:
            json.dump(portfolios, file, ensure_ascii=False, indent=4)
        
        # Sauvegarder dans l'historique avec l'horodatage
        history_file = "{}/portefeuilles_{}.json".format(history_dir, timestamp)
        with open(history_file, 'w', encoding='utf-8') as file:
            # Ajouter les m√©tadonn√©es de date pour faciliter la recherche ult√©rieure
            portfolios_with_metadata = {
                "timestamp": timestamp,
                "date": datetime.datetime.now().isoformat(),
                "portfolios": portfolios
            }
            json.dump(portfolios_with_metadata, file, ensure_ascii=False, indent=4)
        
        # Mettre √† jour le fichier d'index d'historique
        update_history_index(history_file, portfolios_with_metadata)
        
        print("‚úÖ Portefeuilles sauvegard√©s avec succ√®s dans portefeuilles.json et {}".format(history_file))
    except Exception as e:
        print("‚ùå Erreur lors de la sauvegarde des portefeuilles: {}".format(str(e)))

def update_history_index(history_file, portfolio_data):
    """Mettre √† jour l'index des portefeuilles historiques."""
    try:
        index_file = 'data/portfolio_history/index.json'
        
        # Charger l'index existant s'il existe
        index_data = []
        if os.path.exists(index_file):
            try:
                with open(index_file, 'r', encoding='utf-8') as file:
                    index_data = json.load(file)
            except json.JSONDecodeError:
                # R√©initialiser si le fichier est corrompu
                index_data = []
        
        # Cr√©er une entr√©e d'index avec les m√©tadonn√©es essentielles
        entry = {
            "file": os.path.basename(history_file),
            "timestamp": portfolio_data["timestamp"],
            "date": portfolio_data["date"],
            # Ajouter un r√©sum√© des allocations pour r√©f√©rence rapide
            "summary": {}
        }

        # Ajouter le r√©sum√© pour chaque type de portefeuille
        for portfolio_type, portfolio in portfolio_data["portfolios"].items():
            entry["summary"][portfolio_type] = {}
            for category, assets in portfolio.items():
                count = len(assets)
                entry["summary"][portfolio_type][category] = "{} actifs".format(count)
        
        # Ajouter la nouvelle entr√©e au d√©but de la liste (plus r√©cente en premier)
        index_data.insert(0, entry)
        
        # Limiter la taille de l'index si n√©cessaire (garder les 100 derni√®res entr√©es)
        if len(index_data) > 100:
            index_data = index_data[:100]
        
        # Sauvegarder l'index mis √† jour
        with open(index_file, 'w', encoding='utf-8') as file:
            json.dump(index_data, file, ensure_ascii=False, indent=4)
            
    except Exception as e:
        print("‚ö†Ô∏è Avertissement: Erreur lors de la mise √† jour de l'index: {}".format(str(e)))

def main():
    print("üîç Extraction des donn√©es financi√®res...")
    actualites = extract_content_from_html('actualites.html')
    marche = extract_content_from_html('marche.html')
    secteurs = extract_content_from_html('secteurs.html')
    listes = extract_content_from_html('liste.html')  # Nouveau
    etfs = extract_content_from_html('etf.html')      # Nouveau
    
    print("üß† G√©n√©ration des portefeuilles optimis√©s...")
    portfolios = generate_portfolios(actualites, marche, secteurs, listes, etfs)
    
    print("üíæ Sauvegarde des portefeuilles...")
    save_portfolios(portfolios)
    
    print("‚ú® Traitement termin√©!")

if __name__ == "__main__":
    main()
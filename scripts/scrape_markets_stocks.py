#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script pour ajouter manuellement les indices boursiers majeurs du Canada et de l'Inde
qui pourraient √™tre manquants dans les donn√©es collect√©es de Boursorama
"""

import os
import json
import sys
from datetime import datetime

# Chemin du fichier de donn√©es
DATA_FILE = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), "data", "markets.json")

# Indices additionnels √† ajouter (si non pr√©sents)
ADDITIONAL_INDICES = {
    # Indices Canadiens
    "north-america": [
        {
            "country": "Canada",
            "index_name": "S&P/TSX Composite",
            "value": "24 777,91",
            "change": "0,78 %",
            "changePercent": "0,78 %",
            "ytdChange": "5,21 %",
            "opening": "24 584,04",
            "high": "",
            "low": "",
            "trend": "up"
        },
        {
            "country": "Canada",
            "index_name": "S&P/TSX 60",
            "value": "1 491,78",
            "change": "0,82 %",
            "changePercent": "0,82 %",
            "ytdChange": "4,95 %",
            "opening": "1 479,66",
            "high": "",
            "low": "",
            "trend": "up"
        }
    ],
    # Indices Indiens
    "asia": [
        {
            "country": "Inde",
            "index_name": "BSE SENSEX",
            "value": "74 339,44",
            "change": "0,14 %",
            "changePercent": "0,14 %",
            "ytdChange": "2,86 %",
            "opening": "74 235,26",
            "high": "",
            "low": "",
            "trend": "up"
        },
        {
            "country": "Inde",
            "index_name": "NIFTY 50",
            "value": "22 624,80",
            "change": "0,17 %",
            "changePercent": "0,17 %",
            "ytdChange": "3,09 %",
            "opening": "22 587,95",
            "high": "",
            "low": "",
            "trend": "up"
        }
    ]
}

def load_market_data():
    """Charge les donn√©es de march√© existantes"""
    try:
        if os.path.exists(DATA_FILE):
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        return None
    except Exception as e:
        print(f"Erreur lors du chargement des donn√©es: {str(e)}")
        return None

def save_market_data(data):
    """Enregistre les donn√©es mises √† jour"""
    try:
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        print(f"‚úÖ Donn√©es enregistr√©es dans {DATA_FILE}")
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de l'enregistrement des donn√©es: {str(e)}")
        return False

def add_missing_indices(data):
    """Ajoute les indices manquants aux donn√©es existantes"""
    if not data:
        print("‚ùå Aucune donn√©e existante pour ajouter des indices")
        return False
    
    changes_made = False
    
    # Pour chaque r√©gion et ses indices √† ajouter
    for region, indices in ADDITIONAL_INDICES.items():
        # V√©rifier si la r√©gion existe
        if region not in data["indices"]:
            data["indices"][region] = []
        
        # Pour chaque indice √† ajouter
        for index_to_add in indices:
            # V√©rifier si l'indice est d√©j√† pr√©sent
            already_present = False
            for existing_index in data["indices"][region]:
                if (existing_index["country"] == index_to_add["country"] and 
                    existing_index["index_name"] == index_to_add["index_name"]):
                    already_present = True
                    break
            
            # Ajouter l'indice s'il n'est pas d√©j√† pr√©sent
            if not already_present:
                data["indices"][region].append(index_to_add)
                print(f"‚úÖ Ajout de {index_to_add['country']} - {index_to_add['index_name']} √† la r√©gion {region}")
                changes_made = True
            else:
                print(f"‚ÑπÔ∏è L'indice {index_to_add['country']} - {index_to_add['index_name']} est d√©j√† pr√©sent")
    
    # Mettre √† jour le compteur
    if changes_made:
        data["meta"]["count"] = sum(len(indices) for indices in data["indices"].values())
        data["meta"]["lastUpdated"] = datetime.now().isoformat()
    
    return changes_made

def main():
    """Point d'entr√©e principal"""
    try:
        print("üöÄ V√©rification et ajout des indices manquants...")
        
        # Charger les donn√©es existantes
        data = load_market_data()
        if not data:
            print("‚ùå Impossible de charger les donn√©es existantes")
            sys.exit(1)
        
        # Ajouter les indices manquants
        if add_missing_indices(data):
            # Enregistrer les donn√©es mises √† jour
            if save_market_data(data):
                print("‚úÖ Indices manquants ajout√©s avec succ√®s")
            else:
                print("‚ùå √âchec lors de l'enregistrement des donn√©es mises √† jour")
                sys.exit(1)
        else:
            print("‚ÑπÔ∏è Aucun nouvel indice √† ajouter")
        
        sys.exit(0)
        
    except Exception as e:
        print(f"‚ùå Erreur fatale: {str(e)}")
        import traceback
        print(traceback.format_exc())
        sys.exit(1)

if __name__ == "__main__":
    main()

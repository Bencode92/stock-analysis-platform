name: Update Financial Data

on:
  # D√©clenchement manuel
  workflow_dispatch:
  # Mise √† jour automatique toutes les 4 heures
  schedule:
    - cron: '0 */4 * * *'

# Configuration des permissions
permissions:
  contents: write

jobs:
  update-data:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Create data directory if needed
        run: mkdir -p data
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 pandas
      
      # √âtape 1: R√©cup√©ration des actualit√©s et √©v√©nements via FMP
      - name: Update financial news and events from FMP
        id: update_fmp
        run: |
          echo "::group::Fetching data from Financial Modeling Prep API"
          python scripts/fmp_news_updater.py
          echo "::endgroup::"
        env:
          FMP_API_KEY: ${{ secrets.FMP_API_KEY }}
      
      # √âtape 2: V√©rification de la validit√© des donn√©es
      - name: Verify data format and quality
        run: |
          echo "::group::Validating data format"
          python -c "
          import json
          import os
          import sys

          # V√©rifier l'existence du fichier news.json
          news_file = 'data/news.json'
          if not os.path.exists(news_file):
              print(f'‚ùå Erreur: Le fichier {news_file} n\'existe pas!')
              sys.exit(1)
              
          # V√©rifier la validit√© et le contenu
          try:
              with open(news_file, 'r') as f:
                  data = json.load(f)
                  
              # V√©rifier la structure
              if not isinstance(data, dict):
                  print('‚ùå Erreur: Format de donn√©es invalide - news.json n\'est pas un objet')
                  sys.exit(1)
                  
              # V√©rifier les √©v√©nements
              events = data.get('events', [])
              if not isinstance(events, list):
                  print('‚ùå Erreur: Format de donn√©es invalide - events n\'est pas une liste')
                  sys.exit(1)
                  
              # V√©rifier qu'il y a au moins des √©v√©nements
              if len(events) == 0:
                  print('‚ö†Ô∏è Avertissement: Aucun √©v√©nement trouv√© dans les donn√©es')
              else:
                  print(f'‚úÖ Validation r√©ussie: {len(events)} √©v√©nements trouv√©s')
                  
              # V√©rifier les news
              news = data.get('news', [])
              if not isinstance(news, list):
                  print('‚ùå Erreur: Format de donn√©es invalide - news n\'est pas une liste')
                  sys.exit(1)
                  
              # V√©rifier qu'il y a au moins des news
              if len(news) == 0:
                  print('‚ö†Ô∏è Avertissement: Aucune actualit√© trouv√©e dans les donn√©es')
              else:
                  print(f'‚úÖ Validation r√©ussie: {len(news)} actualit√©s trouv√©es')
                  
          except json.JSONDecodeError:
              print('‚ùå Erreur: Le fichier news.json n\'est pas un JSON valide')
              sys.exit(1)
          except Exception as e:
              print(f'‚ùå Erreur inattendue: {str(e)}')
              sys.exit(1)
              
          print('‚úÖ Toutes les validations r√©ussies!')
          "
          echo "::endgroup::"
        
      # √âtape 3: Mise √† jour des donn√©es de march√©
      - name: Update market data
        run: |
          echo "::group::Updating market data"
          python scripts/scrape_markets.py
          echo "::endgroup::"
        continue-on-error: true
      
      # √âtape 4: G√©n√©ration de donn√©es de secours si n√©cessaire
      - name: Generate fallback data if needed
        run: |
          echo "::group::Checking for fallback data needs"
          python -c "
          import json
          import os
          import sys
          from datetime import datetime

          # V√©rifier si les fichiers existent et leur taille
          news_file = 'data/news.json'
          markets_file = 'data/markets.json'
          
          needs_fallback = False
          
          # V√©rifier news.json
          if not os.path.exists(news_file) or os.path.getsize(news_file) < 100:
              print('‚ö†Ô∏è Fichier news.json manquant ou trop petit, g√©n√©ration de secours n√©cessaire')
              needs_fallback = True
          
          # V√©rifier markets.json  
          if not os.path.exists(markets_file) or os.path.getsize(markets_file) < 100:
              print('‚ö†Ô∏è Fichier markets.json manquant ou trop petit, g√©n√©ration de secours n√©cessaire')
              needs_fallback = True
              
          # Si un des fichiers a besoin de secours, g√©n√©rer des donn√©es de base
          if needs_fallback:
              print('üîÑ G√©n√©ration de donn√©es de secours en cours...')
              
              # Exemple de donn√©es de secours pour news.json
              if not os.path.exists(news_file) or os.path.getsize(news_file) < 100:
                  fallback_news = {
                      'lastUpdate': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                      'events': [
                          {
                              'title': 'D√©cision de taux d\\'int√©r√™t (Fed)',
                              'date': datetime.now().strftime('%d/%m/%Y'),
                              'time': '14:00',
                              'type': 'economic',
                              'importance': 'high'
                          },
                          {
                              'title': 'Publication PIB trimestriel (US)',
                              'date': datetime.now().strftime('%d/%m/%Y'),
                              'time': '09:30',
                              'type': 'economic',
                              'importance': 'high'
                          }
                      ],
                      'news': [
                          {
                              'title': 'Les march√©s r√©agissent aux nouvelles donn√©es √©conomiques',
                              'date': datetime.now().strftime('%Y-%m-%d'),
                              'source': 'Fallback Data',
                              'url': '#',
                              'category': 'markets'
                          }
                      ]
                  }
                  
                  with open(news_file, 'w') as f:
                      json.dump(fallback_news, f, indent=2)
                  print(f'‚úÖ Donn√©es de secours g√©n√©r√©es pour {news_file}')
              
              # Exemple de donn√©es de secours pour markets.json
              if not os.path.exists(markets_file) or os.path.getsize(markets_file) < 100:
                  fallback_markets = {
                      'lastUpdate': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                      'indices': [
                          {'name': 'S&P 500', 'value': '5200', 'change': '+0.2%'},
                          {'name': 'Nasdaq', 'value': '17000', 'change': '+0.3%'},
                          {'name': 'CAC 40', 'value': '8200', 'change': '-0.1%'}
                      ]
                  }
                  
                  with open(markets_file, 'w') as f:
                      json.dump(fallback_markets, f, indent=2)
                  print(f'‚úÖ Donn√©es de secours g√©n√©r√©es pour {markets_file}')
          else:
              print('‚úÖ Tous les fichiers de donn√©es sont pr√©sents et valides')
          "
          echo "::endgroup::"
      
      - name: Commit and push changes
        uses: EndBug/add-and-commit@v9
        with:
          add: 'data/'
          message: 'üìä Update financial data via FMP API [automated]'
          default_author: github_actions

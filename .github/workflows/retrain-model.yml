name: Retrain ML Model with User Feedback

on:
  # Exécution programmée (une fois par semaine)
  schedule:
    - cron: '0 0 * * 0'  # Chaque dimanche à minuit
  
  # Exécution manuelle
  workflow_dispatch:
  
  # Exécution après l'ajout de feedbacks
  push:
    paths:
      - 'data/ml_feedback.json'

# Permissions nécessaires
permissions:
  contents: write

jobs:
  retrain-model:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Create directories if they don't exist
        run: |
          mkdir -p ml/models
          mkdir -p data
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f ml/requirements.txt ]; then
            pip install -r ml/requirements.txt
          else
            # Installer les dépendances minimales si le fichier n'existe pas
            pip install scikit-learn pandas numpy
          fi
      
      - name: Check feedback data
        id: check_feedback
        run: |
          if [ -f "data/ml_feedback.json" ]; then
            FEEDBACK_COUNT=$(python -c "import json; data = json.loads(open('data/ml_feedback.json').read() or '[]'); print(data[0]['meta']['feedbackCount'] if data and len(data)>0 and 'meta' in data[0] else 0)")
            echo "feedback_count=$FEEDBACK_COUNT" >> $GITHUB_OUTPUT
            echo "feedback_exists=true" >> $GITHUB_OUTPUT
          else
            echo "feedback_exists=false" >> $GITHUB_OUTPUT
            echo "feedback_count=0" >> $GITHUB_OUTPUT
            echo "[]" > data/ml_feedback.json
          fi
      
      - name: Run script
        run: |
          if [ -f "scripts/retrain_model.py" ]; then
            python scripts/retrain_model.py || echo "Warning: Script execution failed"
          else
            echo "Warning: retrain_model.py not found, skipping"
          fi
      
      - name: Commit model changes
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          
          git add data/ml_feedback.json || true
          git add ml/models/* || true
          
          # Vérifier s'il y a des changements à committer
          if git diff --staged --quiet; then
            echo "Aucun changement à committer"
          else
            git commit -m "Update ML model with user feedback [skip ci]" || echo "Nothing to commit"
            git push || echo "Push failed, but continuing"
          fi
      
      - name: Update status
        run: |
          echo "Workflow completed"

name: Retrain ML Models

on:
  # Déclenchement manuel
  workflow_dispatch:
    inputs:
      epochs:
        description: 'Nombre d''époques d''entraînement'
        default: '3'
        required: true
      batch_size:
        description: 'Taille du batch'
        default: '8'
        required: true
      learning_rate:
        description: 'Taux d''apprentissage'
        default: '5e-5'
        required: true
      sentiment_only:
        description: 'Réentraîner uniquement le modèle de sentiment'
        default: 'false'
        required: false
        type: boolean
      hierarchy_only:
        description: 'Réentraîner uniquement le modèle de hiérarchie'
        default: 'false'
        required: false
        type: boolean
  
  # Déclenchement programmé (une fois par semaine)
  schedule:
    - cron: '0 0 * * 0'  # Tous les dimanches à minuit
  
  # Déclenchement après une mise à jour des données de feedback
  workflow_run:
    workflows: ["Process Feedback Data"]
    types:
      - completed

# Permissions nécessaires
permissions:
  contents: write

jobs:
  retrain:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          lfs: true
      
      - name: Setup Git LFS
        run: |
          git lfs install
          git lfs pull
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ml/requirements.txt
          pip install pandas scikit-learn torch transformers accelerate datasets
      
      - name: Prepare directories
        run: |
          mkdir -p ml/models
          mkdir -p ml/models/finbert_model
          mkdir -p ml/models/finbert_finetuned
          mkdir -p ml/models/hierarchy_model
          mkdir -p ml/feedback
          mkdir -p ml/logs
      
      - name: Copy feedback data
        run: |
          if [ -f "data/ml_feedback.json" ]; then
            cp data/ml_feedback.json ml/feedback/feedback_data.json
          else
            echo "Aucun fichier de feedback trouvé. Création d'un fichier vide."
            echo "[]" > ml/feedback/feedback_data.json
          fi
      
      - name: Check if models exist
        id: check_models
        run: |
          if [ -d "ml/models/finbert_model" ] && [ "$(ls -A ml/models/finbert_model)" ]; then
            echo "sentiment_model_exists=true" >> $GITHUB_OUTPUT
          else
            echo "sentiment_model_exists=false" >> $GITHUB_OUTPUT
          fi
          
          if [ -d "ml/models/hierarchy_model" ] && [ "$(ls -A ml/models/hierarchy_model)" ]; then
            echo "hierarchy_model_exists=true" >> $GITHUB_OUTPUT
          else
            echo "hierarchy_model_exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Determine training parameters
        id: training_params
        run: |
          SENTIMENT_ONLY="${{ github.event.inputs.sentiment_only || 'false' }}"
          HIERARCHY_ONLY="${{ github.event.inputs.hierarchy_only || 'false' }}"
          
          # Si les deux options sont true, on réentraîne les deux modèles
          if [ "$SENTIMENT_ONLY" = "true" ] && [ "$HIERARCHY_ONLY" = "true" ]; then
            SENTIMENT_ONLY="false"
            HIERARCHY_ONLY="false"
          fi
          
          echo "sentiment_only=$SENTIMENT_ONLY" >> $GITHUB_OUTPUT
          echo "hierarchy_only=$HIERARCHY_ONLY" >> $GITHUB_OUTPUT
      
      - name: Run sentiment model retraining
        if: ${{ steps.training_params.outputs.hierarchy_only != 'true' }}
        env:
          EPOCHS: ${{ github.event.inputs.epochs || '3' }}
          BATCH_SIZE: ${{ github.event.inputs.batch_size || '8' }}
          LEARNING_RATE: ${{ github.event.inputs.learning_rate || '5e-5' }}
        run: |
          python ml/model_retraining.py --epochs $EPOCHS --batch-size $BATCH_SIZE --learning-rate $LEARNING_RATE --sentiment-only
      
      - name: Run hierarchy model retraining
        if: ${{ steps.training_params.outputs.sentiment_only != 'true' }}
        env:
          EPOCHS: ${{ github.event.inputs.epochs || '3' }}
          BATCH_SIZE: ${{ github.event.inputs.batch_size || '8' }}
          LEARNING_RATE: ${{ github.event.inputs.learning_rate || '5e-5' }}
        run: |
          python ml/model_retraining.py --epochs $EPOCHS --batch-size $BATCH_SIZE --learning-rate $LEARNING_RATE --hierarchy-only
      
      - name: Check if retraining succeeded
        id: check_retraining
        run: |
          if [ -d "ml/models/finbert_finetuned" ] && [ "$(ls -A ml/models/finbert_finetuned)" ]; then
            echo "sentiment_retraining_succeeded=true" >> $GITHUB_OUTPUT
          else
            echo "sentiment_retraining_succeeded=false" >> $GITHUB_OUTPUT
          fi
          
          if [ -d "ml/models/hierarchy_model" ] && [ "$(ls -A ml/models/hierarchy_model)" ]; then
            echo "hierarchy_retraining_succeeded=true" >> $GITHUB_OUTPUT
          else
            echo "hierarchy_retraining_succeeded=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Generate performance report
        if: steps.check_retraining.outputs.sentiment_retraining_succeeded == 'true' || steps.check_retraining.outputs.hierarchy_retraining_succeeded == 'true'
        run: |
          python -c "from ml.performance_metrics import generate_performance_report; generate_performance_report('ml/logs/performance_report.json')"
      
      - name: Commit and push models
        if: steps.check_retraining.outputs.sentiment_retraining_succeeded == 'true' || steps.check_retraining.outputs.hierarchy_retraining_succeeded == 'true'
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          
          # Utiliser Git LFS pour les modèles
          git lfs track "ml/models/**/*"
          
          # Ajouter et valider les fichiers
          git add ml/models ml/logs .gitattributes
          
          # Construire le message de commit en fonction des modèles réentraînés
          COMMIT_MSG="Update ML models after retraining:"
          if [ "${{ steps.check_retraining.outputs.sentiment_retraining_succeeded }}" = "true" ]; then
            COMMIT_MSG="$COMMIT_MSG sentiment"
          fi
          if [ "${{ steps.check_retraining.outputs.hierarchy_retraining_succeeded }}" = "true" ]; then
            if [ "${{ steps.check_retraining.outputs.sentiment_retraining_succeeded }}" = "true" ]; then
              COMMIT_MSG="$COMMIT_MSG and"
            fi
            COMMIT_MSG="$COMMIT_MSG hierarchy"
          fi
          
          git commit -m "$COMMIT_MSG"
          git push

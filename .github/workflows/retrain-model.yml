name: Retrain ML Model with User Feedback

on:
  # Exécution programmée (une fois par semaine)
  schedule:
    - cron: '0 0 * * 0'  # Chaque dimanche à minuit
  
  # Exécution manuelle
  workflow_dispatch:
  
  # Exécution après l'ajout de feedbacks
  push:
    paths:
      - 'data/ml_feedback.json'

# Permissions nécessaires
permissions:
  contents: write

jobs:
  retrain-model:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f ml/requirements.txt ]; then
            pip install -r ml/requirements.txt
          else
            # Installer les dépendances minimales si le fichier n'existe pas
            pip install transformers torch pandas numpy scikit-learn
          fi
      
      - name: Check feedback data
        id: check_feedback
        run: |
          if [ -f "data/ml_feedback.json" ]; then
            FEEDBACK_COUNT=$(python -c "import json; f=open('data/ml_feedback.json'); data=json.load(f); print(data[0]['meta']['feedbackCount'] if len(data)>0 and 'meta' in data[0] else 0)")
            echo "feedback_count=$FEEDBACK_COUNT" >> $GITHUB_OUTPUT
            echo "feedback_exists=true" >> $GITHUB_OUTPUT
          else
            echo "feedback_exists=false" >> $GITHUB_OUTPUT
            echo "feedback_count=0" >> $GITHUB_OUTPUT
          fi
      
      - name: Retrain model
        if: steps.check_feedback.outputs.feedback_exists == 'true' && steps.check_feedback.outputs.feedback_count != '0'
        run: |
          # Créer le script de réentraînement si nécessaire
          if [ ! -f "scripts/retrain_model.py" ]; then
            mkdir -p scripts
            cat > scripts/retrain_model.py << 'EOL'
#!/usr/bin/env python3
import sys
import os
import json
import logging
from datetime import datetime

# Ajouter le chemin parent au sys.path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Importer le module de classification
from ml.news_classifier import NewsClassifier

def retrain_model():
    """Réentraîne le modèle à partir des feedbacks utilisateurs"""
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(__name__)
    
    feedback_file = "data/ml_feedback.json"
    
    if not os.path.exists(feedback_file):
        logger.error(f"Le fichier de feedback {feedback_file} n'existe pas")
        return False
    
    try:
        # Charger les feedbacks
        with open(feedback_file, 'r', encoding='utf-8') as f:
            feedback_data = json.load(f)
        
        if not isinstance(feedback_data, list) or not feedback_data or 'feedbacks' not in feedback_data[0]:
            logger.error(f"Structure de feedback invalide dans {feedback_file}")
            return False
        
        feedbacks = feedback_data[0].get('feedbacks', [])
        feedback_count = len(feedbacks)
        
        if feedback_count == 0:
            logger.warning("Aucun feedback disponible pour le réentraînement")
            return True
        
        logger.info(f"Réentraînement du modèle avec {feedback_count} feedbacks")
        
        # Dans une implémentation réelle, nous effectuerions ici le réentraînement du modèle
        # En utilisant une bibliothèque comme transformers de Hugging Face
        
        # Simuler le réentraînement
        logger.info("Simulation du réentraînement...")
        
        # Mettre à jour les métadonnées
        feedback_data[0]['meta']['lastRetraining'] = datetime.now().isoformat()
        feedback_data[0]['meta']['modelVersion'] = feedback_data[0]['meta'].get('modelVersion', '1.0.0')
        
        # Enregistrer les métadonnées mises à jour
        with open(feedback_file, 'w', encoding='utf-8') as f:
            json.dump(feedback_data, f, ensure_ascii=False, indent=2)
        
        logger.info("Réentraînement terminé avec succès")
        return True
    
    except Exception as e:
        logger.error(f"Erreur lors du réentraînement: {e}")
        return False

if __name__ == "__main__":
    success = retrain_model()
    sys.exit(0 if success else 1)
EOL
            chmod +x scripts/retrain_model.py
          fi
          
          # Exécuter le script de réentraînement
          python scripts/retrain_model.py
      
      - name: Commit model changes
        if: steps.check_feedback.outputs.feedback_exists == 'true' && steps.check_feedback.outputs.feedback_count != '0'
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          
          git add data/ml_feedback.json
          git add ml/models/ || true
          
          # Vérifier s'il y a des changements à committer
          if git diff --staged --quiet; then
            echo "Aucun changement à committer"
          else
            git commit -m "Update ML model with user feedback [skip ci]"
            git push
          fi
      
      - name: Update status
        if: steps.check_feedback.outputs.feedback_exists == 'true' && steps.check_feedback.outputs.feedback_count != '0'
        run: |
          echo "Le modèle a été réentraîné avec succès"

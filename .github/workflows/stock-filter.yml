name: Stock Advanced Filter

on:
  workflow_dispatch:
  schedule:
    - cron: '0 14 * * 1-5'  # 14:00 UTC (15h/16h Paris selon DST), jours ouvrés

# 🔒 Verrou global (même que le workflow Crypto)
# Ce workflow N'EST PAS prioritaire (il n'annule pas les autres)
concurrency:
  group: repo-writes-global
  cancel-in-progress: false

# ✅ Permissions nécessaires pour push via GITHUB_TOKEN
permissions:
  contents: write

jobs:
  filter-stocks:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0   # indispensable pour rebase propre

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      # Si tu n'as pas de package-lock.json, npm ci échouera -> fallback npm install ciblé
      run: |
        npm ci || npm install csv-parse axios

    - name: Run Stock Advanced Filter
      env:
        TWELVE_DATA_API_KEY: ${{ secrets.TWELVE_DATA_API }}
        INCLUDE_OPTIONS: '1'  # Activer les options
      run: node stock-advanced-filter.js

    - name: Debug - Check generated files
      run: |
        echo "📂 Vérification des fichiers générés:"
        ls -la data/ || true
        git status --porcelain

    - name: Commit results (rebase + retry safe push)
      run: |
        set -e
        git config user.email "actions@github.com"
        git config user.name "github-actions[bot]"

        # Ajouter tous les JSON générés
        git add data/*.json 2>/dev/null || true

        # (Optionnel) si tu veux versionner ces fichiers quand modifiés
        git add -f package.json package-lock.json 2>/dev/null || true

        # Commit seulement s'il y a des changements
        if git diff --quiet && git diff --staged --quiet; then
          echo "ℹ️ Rien à committer"
          exit 0
        fi

        git commit -m "Update stocks data [skip ci]"

        # Push robuste: fetch + rebase + 3 tentatives
        BRANCH="${GITHUB_REF_NAME:-main}"
        for i in 1 2 3; do
          git fetch origin
          git rebase "origin/$BRANCH" || { git rebase --abort || true; }
          if git push origin "HEAD:$BRANCH"; then
            echo "✅ Push réussi"
            exit 0
          fi
          echo "↻ Retry push ($i/3)..." && sleep $((RANDOM%5+2))
        done
        echo "❌ Échec du push après 3 tentatives" >&2
        exit 1

name: Update Financial Data

on:
  schedule:
    - cron: '10 5,13,21 * * *'  # 3 fois par jour (5h10, 13h10, 21h10)
  workflow_dispatch:  # Permet de dÃ©clencher manuellement

permissions:
  contents: write

jobs:
  update-data:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests numpy pandas

      - name: Run data update script
        run: python scripts/update_financial_data.py
        
      - name: Upload News Data via GitHub API
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Lire le contenu du fichier news.json
          NEWS_CONTENT=$(cat data/news.json)
          
          # VÃ©rifier si le fichier existe dÃ©jÃ  pour obtenir son SHA
          RESP=$(curl -s -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/contents/data/news.json")
          SHA=$(echo "$RESP" | jq -r '.sha // empty')
          
          # Construire la charge utile JSON pour l'API
          if [ -n "$SHA" ]; then
            # Mettre Ã  jour le fichier existant
            DATA=$(jq -n --arg content "$(echo "$NEWS_CONTENT" | base64 -w 0)" \
                      --arg message "ðŸ“Š Update news data: $(date)" \
                      --arg sha "$SHA" \
                      '{message: $message, content: $content, sha: $sha}')
          else
            # CrÃ©er un nouveau fichier
            DATA=$(jq -n --arg content "$(echo "$NEWS_CONTENT" | base64 -w 0)" \
                      --arg message "ðŸ“Š Create news data: $(date)" \
                      '{message: $message, content: $content}')
          fi
          
          # Envoyer la requÃªte Ã  l'API GitHub
          curl -X PUT -H "Authorization: token $GH_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$DATA" \
            "https://api.github.com/repos/${{ github.repository }}/contents/data/news.json"

      - name: Upload Portfolios Data via GitHub API
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Lire le contenu du fichier portfolios.json
          PORTFOLIOS_CONTENT=$(cat data/portfolios.json)
          
          # VÃ©rifier si le fichier existe dÃ©jÃ  pour obtenir son SHA
          RESP=$(curl -s -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/contents/data/portfolios.json")
          SHA=$(echo "$RESP" | jq -r '.sha // empty')
          
          # Construire la charge utile JSON pour l'API
          if [ -n "$SHA" ]; then
            # Mettre Ã  jour le fichier existant
            DATA=$(jq -n --arg content "$(echo "$PORTFOLIOS_CONTENT" | base64 -w 0)" \
                      --arg message "ðŸ“Š Update portfolios data: $(date)" \
                      --arg sha "$SHA" \
                      '{message: $message, content: $content, sha: $sha}')
          else
            # CrÃ©er un nouveau fichier
            DATA=$(jq -n --arg content "$(echo "$PORTFOLIOS_CONTENT" | base64 -w 0)" \
                      --arg message "ðŸ“Š Create portfolios data: $(date)" \
                      '{message: $message, content: $content}')
          fi
          
          # Envoyer la requÃªte Ã  l'API GitHub
          curl -X PUT -H "Authorization: token $GH_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$DATA" \
            "https://api.github.com/repos/${{ github.repository }}/contents/data/portfolios.json"

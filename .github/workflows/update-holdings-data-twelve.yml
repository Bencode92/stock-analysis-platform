name: Update Holdings via Twelve Data API

on:
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Forcer la mise √† jour'
        required: false
        default: 'false'
        type: choice
        options: ['true', 'false']
      max_holdings:
        description: 'Max holdings/ETF'
        required: false
        default: '10'
        type: string
  schedule:
    - cron: '0 3 * * 0'

permissions:
  contents: write

env:
  PYTHON_VERSION: '3.10'
  TZ: 'Europe/Paris'

jobs:
  update-holdings:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Check prerequisites
        run: |
          if [ -z "${{ secrets.TWELVE_DATA_API }}" ]; then
            echo "::error::Secret TWELVE_DATA_API missing"
            exit 1
          fi
          if [ ! -f "data/sectors.json" ]; then
            echo "::error::data/sectors.json not found"
            exit 1
          fi
          echo "‚úÖ Prerequisites OK"
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
          
      - name: Check holdings status
        id: check_status
        shell: bash
        run: |
          set -euo pipefail
          if [[ -f data/etf_holdings.json ]]; then
            MTIME=$(stat -c %Y data/etf_holdings.json)
            NOW=$(date +%s)
            FILE_AGE=$(( (NOW - MTIME) / 86400 ))
            echo "üìÅ Fichier existant, √¢ge: ${FILE_AGE} jours"
            
            if [[ "$FILE_AGE" -lt 6 && "${{ github.event.inputs.force_update }}" != "true" ]]; then
              echo "‚ÑπÔ∏è Fichier r√©cent (< 6 jours) et pas de force_update"
              echo "skip_update=true" >> "$GITHUB_OUTPUT"
            else
              echo "üîÑ Mise √† jour n√©cessaire (√¢ge >= 6 jours ou force_update=true)"
              echo "skip_update=false" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "üìù Aucun fichier existant - cr√©ation n√©cessaire"
            echo "skip_update=false" >> "$GITHUB_OUTPUT"
          fi
          
      - name: Debug skip flag
        run: |
          echo "================================"
          echo "skip_update = ${{ steps.check_status.outputs.skip_update }}"
          echo "force_update = ${{ github.event.inputs.force_update }}"
          echo "================================"
          
      - name: Force update if requested
        if: github.event.inputs.force_update == 'true'
        run: |
          echo "üîß Force update demand√© - suppression du fichier existant"
          rm -f data/etf_holdings.json || true
          ls -la data/ || true
          
      - name: Update holdings
        if: steps.check_status.outputs.skip_update != 'true'
        env:
          TWELVE_DATA_API: ${{ secrets.TWELVE_DATA_API }}
          HOLDINGS_MAX: ${{ github.event.inputs.max_holdings || '10' }}
          HOLDINGS_STALE_DAYS: '7'
          HOLDINGS_SLEEP: '1.0'
        run: |
          echo "üöÄ Lancement du script Python"
          echo "   HOLDINGS_MAX=$HOLDINGS_MAX"
          echo "   HOLDINGS_STALE_DAYS=$HOLDINGS_STALE_DAYS"
          python scripts/update_holdings.py
          
      - name: Verify results
        if: steps.check_status.outputs.skip_update != 'true'
        run: |
          echo "üìä V√©rification des r√©sultats..."
          if [ ! -f "data/etf_holdings.json" ]; then
            echo "::error::File not generated"
            exit 1
          fi
          echo "‚úÖ Fichier g√©n√©r√©:"
          ls -lh data/etf_holdings.json
          
          # Afficher un r√©sum√©
          python -c "
import json
with open('data/etf_holdings.json') as f:
    data = json.load(f)
    print(f'ETFs: {len(data.get(\"etfs\", {}))}')
    print(f'Holdings: {data[\"meta\"].get(\"total_holdings\", 0)}')
          "
          
      - name: Commit and push
        if: steps.check_status.outputs.skip_update != 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # V√©rifier s'il y a des changements
          git add data/etf_holdings.json
          
          if git diff --cached --quiet; then
            echo "‚ÑπÔ∏è Aucun changement √† commiter"
          else
            TIMESTAMP=$(TZ=${{ env.TZ }} date '+%Y-%m-%d %H:%M')
            git commit -m "üìà Update ETF holdings [$TIMESTAMP]"
            git push
            echo "‚úÖ Modifications push√©es"
          fi
          
      - name: Summary
        if: always()
        run: |
          echo "## R√©sum√©" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.check_status.outputs.skip_update }}" == "true" ]; then
            echo "‚ÑπÔ∏è **Mise √† jour ignor√©e** - Fichier r√©cent" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Pour forcer: Run workflow avec force_update=true" >> $GITHUB_STEP_SUMMARY
          elif [ -f "data/etf_holdings.json" ]; then
            echo "‚úÖ **Mise √† jour r√©ussie**" >> $GITHUB_STEP_SUMMARY
            ls -lh data/etf_holdings.json >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **√âchec**" >> $GITHUB_STEP_SUMMARY
          fi

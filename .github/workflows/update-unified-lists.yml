name: üìä Mise √† jour unifi√©e NASDAQ-STOXX

on:
  # D√©clenchement manuel
  workflow_dispatch:
  # Ajout d'un d√©clenchement automatique toutes les 30 minutes
  schedule:
    - cron: '15,45 * * * *'  # Ex√©cuter √† 15e et 45e minute de chaque heure

# Configuration des permissions
permissions:
  contents: write

jobs:
  # Nom de job clarifi√© pour √©viter toute confusion avec update-market-data
  update-lists-only:  # Nom de job modifi√© pour indiquer clairement qu'il ne touche que les listes
    runs-on: ubuntu-latest
    # D√©finir un timeout pour √©viter les longues ex√©cutions
    timeout-minutes: 20
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v3
        with:
          # S'assurer que l'action checkout r√©cup√®re l'historique complet
          fetch-depth: 0
          # S'assurer que le token GitHub est utilis√© pour l'authentification
          token: ${{ github.token }}
      
      - name: üì¶ Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: üìÇ Create data directory if needed
        run: mkdir -p data
          
      - name: üìö Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4
          # D√©sactiver les avertissements de certificat pour urllib3
          pip install urllib3
        
      - name: üöÄ Execute unified lists data script
        run: python scripts/update_unified_lists.py
        continue-on-error: true  # Ne pas faire √©chouer le workflow si le script √©choue
        
      - name: üßπ Cleanup old files
        run: python scripts/cleanup_old_files.py
        continue-on-error: true  # Ne pas faire √©chouer le workflow en cas d'erreur de nettoyage
        
      - name: ‚úÖ Verify data files exist
        run: |
          # V√©rifier si le fichier lists.json existe
          if [ ! -f data/lists.json ]; then
            echo "Fichier lists.json non trouv√©, cr√©ation d'un fichier vide"
            echo '{
              "nasdaq": {
                "indices": {
                  "a": [], "b": [], "c": [], "d": [], "e": [], "f": [], "g": [], "h": [], "i": [], "j": [],
                  "k": [], "l": [], "m": [], "n": [], "o": [], "p": [], "q": [], "r": [], "s": [], "t": [],
                  "u": [], "v": [], "w": [], "x": [], "y": [], "z": []
                },
                "top_performers": {
                  "daily": {"best": [], "worst": []},
                  "ytd": {"best": [], "worst": []}
                },
                "meta": {
                  "source": "Boursorama",
                  "description": "Actions du NASDAQ Composite (√âtats-Unis)",
                  "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
                  "count": 0
                }
              },
              "stoxx": {
                "indices": {
                  "a": [], "b": [], "c": [], "d": [], "e": [], "f": [], "g": [], "h": [], "i": [], "j": [],
                  "k": [], "l": [], "m": [], "n": [], "o": [], "p": [], "q": [], "r": [], "s": [], "t": [],
                  "u": [], "v": [], "w": [], "x": [], "y": [], "z": []
                },
                "top_performers": {
                  "daily": {"best": [], "worst": []},
                  "ytd": {"best": [], "worst": []}
                },
                "meta": {
                  "source": "Boursorama",
                  "description": "Actions du DJ STOXX 600 (Europe)",
                  "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
                  "count": 0,
                  "pagination": {
                    "currentPage": 1,
                    "totalPages": 1
                  }
                }
              }
            }' > data/lists.json
          fi
          
          # V√©rifier si le fichier de r√©sum√© global existe
          if [ ! -f data/update_summary.json ]; then
            echo "Fichier update_summary.json non trouv√©, cr√©ation d'un fichier vide"
            echo '{
              "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
              "nasdaq": {
                "count": 0,
                "status": "pending"
              },
              "stoxx": {
                "status": "pending",
                "pages": 0,
                "stocks": 0
              },
              "combined_file": "lists.json",
              "global_ranking": {
                "status": "pending",
                "file": "global_top_performers.json"
              }
            }' > data/update_summary.json
          fi
          
          # V√©rifier si le fichier de classement global existe
          if [ ! -f data/global_top_performers.json ]; then
            echo "Fichier global_top_performers.json non trouv√©, cr√©ation d'un fichier vide"
            echo '{
              "daily": {
                "best": [],
                "worst": []
              },
              "ytd": {
                "best": [],
                "worst": []
              },
              "meta": {
                "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
                "count": 0,
                "description": "Classement global combin√© (NASDAQ + STOXX)"
              }
            }' > data/global_top_performers.json
          fi
        
      - name: üìä V√©rifier l'√©tat du fichier lists.json
        run: |
          if [ -f data/lists.json ]; then
            echo "‚úÖ Le fichier lists.json existe"
            filesize=$(stat -c%s "data/lists.json")
            echo "Taille du fichier: $filesize octets"
            
            if [ $filesize -lt 1000 ]; then
              echo "‚ö†Ô∏è ATTENTION: Le fichier semble trop petit, peut-√™tre incomplet"
            else
              echo "Taille correcte, v√©rification des donn√©es..."
              head -n 30 data/lists.json
            fi
          else
            echo "‚ùå ERREUR: lists.json n'existe pas!"
          fi
      - name: üíæ Commit and push if changed
        run: |
          # Configuration de git avec le token explicite
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # √âviter d'utiliser stash qui peut masquer les changements
          # git stash -u || true
          
          echo "√âtat actuel des fichiers:"
          git status data/lists.json data/update_summary.json data/global_top_performers.json
          
          # Forcer l'ajout des fichiers (m√™me sans changement d√©tect√©)
          echo "Ajout forc√© des fichiers principaux..."
          git add -f data/lists.json
          git add -f data/update_summary.json 
          git add -f data/global_top_performers.json
          
          # Supprimer les fichiers stoxx_page_*.json du repo s'ils existent
          for file in data/stoxx_page_*.json; do
            if [ -f "$file" ]; then
              git rm "$file" || true
            fi
          done
          
          # Cr√©er un commit inconditionnel
          echo "Cr√©ation du commit..."
          git commit -m "üìä Mise √† jour forc√©e des donn√©es NASDAQ et STOXX [skip ci]" || echo "Pas de changements √† committer"
          
          # Push avec force pour √©viter les conflits
          echo "Push des modifications..."
          git push --force origin HEAD:${GITHUB_REF}

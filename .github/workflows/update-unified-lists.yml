name: üìä Mise √† jour unifi√©e NASDAQ-STOXX

on:
  # D√©clenchement manuel
  workflow_dispatch:
  # Ajout d'un d√©clenchement automatique toutes les 30 minutes
  schedule:
    - cron: '15,45 * * * *'  # Ex√©cuter √† 15e et 45e minute de chaque heure

# Configuration des permissions
permissions:
  contents: write

jobs:
  # Nom de job clarifi√© pour √©viter toute confusion avec update-market-data
  update-lists-only:  # Nom de job modifi√© pour indiquer clairement qu'il ne touche que les listes
    runs-on: ubuntu-latest
    # D√©finir un timeout pour √©viter les longues ex√©cutions
    timeout-minutes: 20
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v3
        with:
          # S'assurer que l'action checkout r√©cup√®re l'historique complet
          fetch-depth: 0
          # S'assurer que le token GitHub est utilis√© pour l'authentification
          token: ${{ github.token }}
      
      - name: üì¶ Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: üìÇ Create data directory if needed
        run: mkdir -p data
      
      - name: üìÇ Diagnostiquer l'√©tat avant ex√©cution
        run: |
          echo "=== √âtat initial des fichiers ==="
          ls -la data/ || echo "Dossier data/ n'existe pas ou est vide"
          if [ -f data/lists.json ]; then
            echo "=== D√©but du contenu de lists.json ==="
            head -20 data/lists.json
            echo "=== Taille du fichier lists.json ==="
            stat -c %s data/lists.json
          else
            echo "Fichier lists.json n'existe pas encore"
          fi
          
      - name: üìö Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4
          # D√©sactiver les avertissements de certificat pour urllib3
          pip install urllib3
        
      - name: üöÄ Execute unified lists data script
        run: python update_unified_lists.py
        # Retir√© continue-on-error pour voir les erreurs r√©elles
        
      - name: üìÇ Diagnostiquer l'√©tat apr√®s ex√©cution
        run: |
          echo "=== √âtat des fichiers apr√®s ex√©cution du script ==="
          ls -la data/
          if [ -f data/lists.json ]; then
            echo "=== D√©but du contenu de lists.json ==="
            head -20 data/lists.json
            echo "=== Taille du fichier lists.json ==="
            stat -c %s data/lists.json
            echo "=== Contenu du champ meta.timestamp ==="
            grep -o '\"timestamp\": \"[^\"]*\"' data/lists.json | head -1
          else
            echo "Fichier lists.json n'existe toujours pas!"
          fi
        
      - name: ‚úÖ Verify data files exist
        run: |
          # V√©rifier si le fichier lists.json existe
          if [ ! -f data/lists.json ]; then
            echo "Fichier lists.json non trouv√©, cr√©ation d'un fichier vide"
            echo '{
              "indices": {
                "a": [], "b": [], "c": [], "d": [], "e": [], "f": [], "g": [], "h": [], "i": [], "j": [],
                "k": [], "l": [], "m": [], "n": [], "o": [], "p": [], "q": [], "r": [], "s": [], "t": [],
                "u": [], "v": [], "w": [], "x": [], "y": [], "z": []
              },
              "top_performers": {
                "daily": {"best": [], "worst": []},
                "ytd": {"best": [], "worst": []}
              },
              "meta": {
                "source": "Boursorama",
                "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
                "count": 0,
                "markets": ["NASDAQ", "STOXX"]
              }
            }' > data/lists.json
          fi
        
      - name: üíæ Commit and push if changed
        run: |
          # Configuration de git avec le token explicite
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # S'assurer que tout est propre avant de commencer
          git stash -u || true
          
          # Ajouter le fichier lists.json uniquement
          git add data/lists.json
          
          # V√©rifier s'il y a des modifications √† commiter
          if git diff --staged --quiet; then
            echo "Aucune modification d√©tect√©e, pas de commit n√©cessaire"
          else
            echo "Modifications d√©tect√©es, cr√©ation d'un commit"
            git commit -m "üìä Mise √† jour unifi√©e des donn√©es NASDAQ et STOXX [skip ci]"
            
            # Pull d'abord pour √©viter les conflits
            git pull --rebase --autostash origin ${GITHUB_REF}
            
            # Push avec gestion d'erreur
            git push origin HEAD:${GITHUB_REF} || {
              echo "Erreur lors du push, tentative avec --force"
              git push --force origin HEAD:${GITHUB_REF}
            }
          fi

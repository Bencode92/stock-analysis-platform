// ============ LABEL UPDATER MODULE ============
// Module pour mettre Ã  jour automatiquement les labels de l'interface
// Version 1.0 - Changement Rendement â†’ DIVIDENDE TTM

const LabelUpdater = {
    // Configuration centralisÃ©e des labels
    labels: {
        headers: {
            'Rendement': 'DIVIDENDE TTM',
            'RENDEMENT': 'DIVIDENDE TTM',
            'VolatilitÃ© 3Y %': 'VOLATILITÃ‰ 3A %', // Plus cohÃ©rent en franÃ§ais
        },
        details: {
            'Rendement:': 'Dividende TTM:',
            'Payout:': 'Payout TTM:',
            'VolatilitÃ©:': 'VolatilitÃ© 3A:'
        }
    },

    // Mise Ã  jour des en-tÃªtes de table
    updateTableHeaders() {
        document.querySelectorAll('.data-table thead th').forEach(th => {
            const text = th.textContent.trim();
            if (this.labels.headers[text]) {
                th.textContent = this.labels.headers[text];
                th.setAttribute('data-original-label', text); // Pour rÃ©versibilitÃ©
            }
        });
    },

    // Mise Ã  jour des tooltips au survol
    addTooltips() {
        document.querySelectorAll('.data-table thead th').forEach(th => {
            if (th.textContent.includes('DIVIDENDE TTM')) {
                th.title = 'Rendement des dividendes sur les 12 derniers mois';
                th.style.cursor = 'help';
            }
            if (th.textContent.includes('YTD')) {
                th.title = 'Performance depuis le dÃ©but de l\'annÃ©e (Year To Date)';
                th.style.cursor = 'help';
            }
            if (th.textContent.includes('VOLATILITÃ‰')) {
                th.title = 'VolatilitÃ© annualisÃ©e sur 3 ans';
                th.style.cursor = 'help';
            }
        });
    },

    // Observer pour gÃ©rer le contenu dynamique
    observeChanges() {
        const observer = new MutationObserver(() => {
            this.updateTableHeaders();
            this.addTooltips();
        });

        // Observer les changements dans les tableaux
        document.querySelectorAll('.region-content').forEach(content => {
            observer.observe(content, { childList: true, subtree: true });
        });
    },

    // Mise Ã  jour des panneaux de dÃ©tails (si prÃ©sents)
    updateDetailPanels() {
        // Cette fonction sera appelÃ©e depuis liste-script.js lors du rendu des dÃ©tails
        document.querySelectorAll('.stock-details').forEach(panel => {
            panel.querySelectorAll('span.opacity-60').forEach(label => {
                const text = label.textContent;
                if (this.labels.details[text]) {
                    label.textContent = this.labels.details[text];
                }
            });
        });
    },

    // Ajouter indicateur de source pour les dividendes
    formatDividendSource(source) {
        const sourceMap = {
            'TTM': 'ðŸ“… 12 derniers mois',
            'REG': 'ðŸ“Š RÃ©gulier (hors spÃ©ciaux)',
            'FWD': 'ðŸ“ˆ PrÃ©visionnel',
            'TTM (calc)': 'ðŸ“… CalculÃ© TTM',
            'TTM (calc, split-adj)': 'ðŸ“… TTM ajustÃ© (split)'
        };
        return sourceMap[source] || source;
    },

    // Ajouter indicateur de statut payout
    formatPayoutStatus(status) {
        const statusMap = {
            'conservative': 'ðŸŸ¢ Conservateur',
            'moderate': 'ðŸ”µ ModÃ©rÃ©',
            'high': 'ðŸŸ¡ Ã‰levÃ©',
            'very_high': 'ðŸŸ  TrÃ¨s Ã©levÃ©',
            'unsustainable': 'ðŸ”´ Non soutenable'
        };
        return statusMap[status] || status;
    },

    // Initialisation
    init() {
        // Attendre que le DOM soit prÃªt
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => this.init());
            return;
        }

        // Mise Ã  jour initiale
        setTimeout(() => {
            this.updateTableHeaders();
            this.addTooltips();
            this.observeChanges();
            console.log('âœ… Label Updater initialized - Headers updated to TTM format');
        }, 100);
    }
};

// Auto-initialisation
LabelUpdater.init();

// Export pour utilisation dans d'autres modules
if (typeof module !== 'undefined' && module.exports) {
    module.exports = LabelUpdater;
}
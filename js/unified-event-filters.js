/**
 * Gestionnaire unifi√© des filtres d'√©v√©nements
 * Version corrig√©e pour r√©soudre les probl√®mes de filtrage
 */
const UnifiedEventFilters = {
    // Configuration
    config: {
        dateFilters: {
            selector: '.filter-button',
            activeClass: 'active',
            todaySelector: '#today-filter',
            weekSelector: '#week-filter'
        },
        categoryFilters: {
            selector: '#event-category-filters button',
            activeClass: 'filter-active',
            allSelector: '[data-category="all"]'
        },
        eventContainers: {
            main: '#events-container',
            itemClass: '.event-card'
        },
        storage: {
            dateFilterKey: 'eventDateFilter',
            categoryFilterKey: 'eventCategoryFilter'
        }
    },
    
    // √âtat actuel des filtres
    state: {
        dateFilter: 'today', // 'today' ou 'week'
        categoryFilter: 'all', // 'all', 'economic', 'ipo', 'm&a', etc.
        initialized: false // Tracker si d√©j√† initialis√©
    },
    
    // Initialisation
    init: function() {
        console.log('üîÑ Initialisation de UnifiedEventFilters...');
        
        // √âviter l'initialisation multiple
        if (this.state.initialized) {
            console.log('‚ö†Ô∏è UnifiedEventFilters d√©j√† initialis√©, ignor√©');
            return;
        }
        this.state.initialized = true;
        
        // Charger les pr√©f√©rences sauvegard√©es
        this.loadSavedPreferences();
        console.log(`üìã Pr√©f√©rences charg√©es: dateFilter=${this.state.dateFilter}, categoryFilter=${this.state.categoryFilter}`);
        
        // Configurer les √©couteurs d'√©v√©nements
        this.setupEventListeners();
        console.log('üîä √âcouteurs d'√©v√©nements configur√©s');
        
        // Mise √† jour de l'UI pour refl√©ter l'√©tat actuel
        this.updateDateFilterUI();
        this.updateCategoryFilterUI();
        console.log('üîÑ Interface utilisateur mise √† jour');
        
        // √âcouter l'√©v√©nement custom pour savoir quand les √©v√©nements sont pr√™ts
        document.addEventListener('events-ready', (e) => {
            console.log(`üéØ √âv√©nement 'events-ready' re√ßu avec ${e.detail.count} √©v√©nements`);
            setTimeout(() => {
                this.applyFilters();
            }, 100);
        });
        
        // Attendre que tout soit charg√©, puis appliquer les filtres
        setTimeout(() => {
            this.checkDateFormat();
            this.applyFilters();
            console.log('‚úÖ Filtres initiaux appliqu√©s');
            
            // Exposer l'instance globalement pour le d√©bogage
            window.EventFilters = this;
        }, 1000);
    },
    
    // D√©bogage - Examiner l'√©tat des cartes d'√©v√©nements
    debug: function() {
        console.group('üîç D√©bogage des filtres d\'√©v√©nements');
        console.log('√âtat des filtres:', {
            dateFilter: this.state.dateFilter,
            categoryFilter: this.state.categoryFilter,
            initialized: this.state.initialized
        });
        
        const eventsContainer = document.querySelector(this.config.eventContainers.main);
        if (!eventsContainer) {
            console.error('‚ùå Conteneur d\'√©v√©nements non trouv√© (#events-container)');
            console.groupEnd();
            return;
        }
        
        const events = eventsContainer.querySelectorAll(this.config.eventContainers.itemClass);
        console.log(`üìä ${events.length} √©v√©nements trouv√©s dans le DOM`);
        
        // Analyser tous les √©v√©nements
        const typeCounts = {};
        const displayCounts = { visible: 0, hidden: 0 };
        const problematicEvents = [];
        
        events.forEach((event, index) => {
            const eventType = event.getAttribute('data-type');
            const isVisible = event.style.display !== 'none';
            const title = event.getAttribute('data-title') || 
                          event.querySelector('h3')?.textContent || 
                          `√âv√©nement #${index+1}`;
            
            // Compter par type
            typeCounts[eventType] = (typeCounts[eventType] || 0) + 1;
            
            // Compter visibles/cach√©s
            if (isVisible) displayCounts.visible++; else displayCounts.hidden++;
            
            // Identifier les √©v√©nements probl√©matiques
            if (!eventType) {
                problematicEvents.push({
                    index,
                    title: title.substring(0, 30) + (title.length > 30 ? '...' : ''),
                    problem: 'Pas d\'attribut data-type'
                });
            }
            
            // Pour les 5 premiers √©v√©nements, afficher des d√©tails complets
            if (index < 5) {
                console.log(`√âv√©nement #${index+1}:`, {
                    title: title.substring(0, 30) + (title.length > 30 ? '...' : ''),
                    type: eventType,
                    visible: isVisible,
                    shouldBeVisible: this.shouldBeVisible(event)
                });
            }
        });
        
        console.log('Types d\'√©v√©nements:', typeCounts);
        console.log('Affichage:', displayCounts);
        console.log('√âv√©nements probl√©matiques:', problematicEvents.length > 0 ? problematicEvents : 'Aucun');
        console.groupEnd();
    },
    
    // V√©rifier si un √©v√©nement devrait √™tre visible selon les filtres actuels
    shouldBeVisible: function(event) {
        return this.matchesDateFilter(event) && this.matchesCategoryFilter(event);
    },
    
    // Chargement des pr√©f√©rences
    loadSavedPreferences: function() {
        // Charger le filtre de date
        const savedDateFilter = localStorage.getItem(this.config.storage.dateFilterKey);
        if (savedDateFilter && (savedDateFilter === 'today' || savedDateFilter === 'week')) {
            this.state.dateFilter = savedDateFilter;
        }
        
        // Charger le filtre de cat√©gorie
        const savedCategoryFilter = localStorage.getItem(this.config.storage.categoryFilterKey);
        if (savedCategoryFilter) {
            this.state.categoryFilter = savedCategoryFilter;
        }
    },
    
    // Configuration des √©couteurs d'√©v√©nements
    setupEventListeners: function() {
        // √âcouteurs pour les filtres de date
        const dateFilters = document.querySelectorAll(this.config.dateFilters.selector);
        
        dateFilters.forEach(filter => {
            filter.addEventListener('click', (e) => {
                // D√©terminer quel filtre a √©t√© cliqu√©
                if (e.currentTarget.id === 'today-filter') {
                    this.setDateFilter('today');
                } else if (e.currentTarget.id === 'week-filter') {
                    this.setDateFilter('week');
                }
            });
        });
        
        // √âcouteurs pour les filtres de cat√©gorie
        const categoryFilters = document.querySelectorAll(this.config.categoryFilters.selector);
        
        categoryFilters.forEach(filter => {
            filter.addEventListener('click', (e) => {
                const category = e.currentTarget.getAttribute('data-category');
                console.log(`üñ±Ô∏è Clic sur filtre cat√©gorie: ${category}`);
                this.setCategoryFilter(category);
            });
        });
    },
    
    // D√©finir le filtre de date
    setDateFilter: function(filterType) {
        if (filterType !== this.state.dateFilter) {
            console.log(`üìÖ Changement de filtre date: ${this.state.dateFilter} -> ${filterType}`);
            this.state.dateFilter = filterType;
            
            // Sauvegarder la pr√©f√©rence
            localStorage.setItem(this.config.storage.dateFilterKey, filterType);
            
            // Mettre √† jour l'UI
            this.updateDateFilterUI();
            
            // Appliquer les filtres
            this.applyFilters();
        }
    },
    
    // D√©finir le filtre de cat√©gorie
    setCategoryFilter: function(category) {
        if (category !== this.state.categoryFilter) {
            console.log(`üîñ Changement de filtre cat√©gorie: ${this.state.categoryFilter} -> ${category}`);
            this.state.categoryFilter = category;
            
            // Sauvegarder la pr√©f√©rence
            localStorage.setItem(this.config.storage.categoryFilterKey, category);
            
            // Mettre √† jour l'UI
            this.updateCategoryFilterUI();
            
            // Appliquer les filtres
            this.applyFilters();
        }
    },
    
    // Mettre √† jour l'interface utilisateur pour les filtres de date
    updateDateFilterUI: function() {
        const todayFilter = document.querySelector(this.config.dateFilters.todaySelector);
        const weekFilter = document.querySelector(this.config.dateFilters.weekSelector);
        
        if (todayFilter && weekFilter) {
            // R√©initialiser les classes
            todayFilter.classList.remove(this.config.dateFilters.activeClass);
            weekFilter.classList.remove(this.config.dateFilters.activeClass);
            todayFilter.classList.remove('text-green-400', 'border-green-400', 'border-opacity-30');
            weekFilter.classList.remove('text-green-400', 'border-green-400', 'border-opacity-30');
            todayFilter.classList.add('text-gray-400', 'border-gray-700');
            weekFilter.classList.add('text-gray-400', 'border-gray-700');
            
            // Ajouter la classe active au filtre s√©lectionn√©
            if (this.state.dateFilter === 'today') {
                todayFilter.classList.add(this.config.dateFilters.activeClass);
                todayFilter.classList.remove('text-gray-400', 'border-gray-700');
                todayFilter.classList.add('text-green-400', 'border-green-400', 'border-opacity-30');
            } else {
                weekFilter.classList.add(this.config.dateFilters.activeClass);
                weekFilter.classList.remove('text-gray-400', 'border-gray-700');
                weekFilter.classList.add('text-green-400', 'border-green-400', 'border-opacity-30');
            }
        } else {
            console.warn('‚ö†Ô∏è Boutons de filtre de date non trouv√©s dans le DOM');
        }
    },
    
    // Mettre √† jour l'interface utilisateur pour les filtres de cat√©gorie
    updateCategoryFilterUI: function() {
        const categoryFilters = document.querySelectorAll(this.config.categoryFilters.selector);
        
        if (categoryFilters.length === 0) {
            console.warn('‚ö†Ô∏è Aucun bouton de filtre de cat√©gorie trouv√© dans le DOM');
            return;
        }
        
        categoryFilters.forEach(filter => {
            // R√©initialiser les classes
            filter.classList.remove(this.config.categoryFilters.activeClass);
            filter.classList.remove('bg-green-400', 'bg-opacity-10', 'text-green-400', 'border-green-400', 'border-opacity-30');
            filter.classList.add('bg-transparent', 'text-gray-400', 'border-gray-700');
            
            // Ajouter la classe active au filtre s√©lectionn√©
            const filterCategory = filter.getAttribute('data-category');
            if (filterCategory === this.state.categoryFilter) {
                filter.classList.add(this.config.categoryFilters.activeClass);
                filter.classList.remove('bg-transparent', 'text-gray-400', 'border-gray-700');
                filter.classList.add('bg-green-400', 'bg-opacity-10', 'text-green-400', 'border-green-400', 'border-opacity-30');
            }
        });
    },
    
    // Appliquer les filtres aux √©v√©nements
    applyFilters: function() {
        console.log(`üîç Application des filtres: dateFilter=${this.state.dateFilter}, categoryFilter=${this.state.categoryFilter}`);
        
        const eventsContainer = document.querySelector(this.config.eventContainers.main);
        if (!eventsContainer) {
            console.error('‚ùå Conteneur d\'√©v√©nements non trouv√© pour l\'application des filtres');
            return;
        }
        
        const events = eventsContainer.querySelectorAll(this.config.eventContainers.itemClass);
        console.log(`üìä Filtrage de ${events.length} √©v√©nements`);
        
        let visibleCount = 0;
        let hiddenCount = 0;
        
        // Regarder les 3 premiers √©v√©nements en d√©tail
        const detailEvents = [];
        
        events.forEach((event, index) => {
            const matchesDate = this.matchesDateFilter(event);
            const matchesCategory = this.matchesCategoryFilter(event);
            const shouldBeVisible = matchesDate && matchesCategory;
            
            // Si l'√©v√©nement devrait √™tre visible selon les deux filtres
            if (shouldBeVisible) {
                event.style.display = '';
                event.classList.add('animate-fadeIn');
                visibleCount++;
            } else {
                event.style.display = 'none';
                event.classList.remove('animate-fadeIn');
                hiddenCount++;
            }
            
            // Collecter des d√©tails pour les premiers √©v√©nements
            if (index < 3) {
                detailEvents.push({
                    index,
                    type: event.getAttribute('data-type'),
                    title: event.getAttribute('data-title') || event.querySelector('h3')?.textContent || `√âv√©nement #${index+1}`,
                    matchesDate,
                    matchesCategory,
                    visible: shouldBeVisible
                });
            }
        });
        
        console.log(`‚úì Filtrage termin√©: ${visibleCount} √©v√©nements visibles, ${hiddenCount} masqu√©s`);
        console.log('D√©tails des premiers √©v√©nements:', detailEvents);
        
        // V√©rifier s'il y a des √©v√©nements visibles
        this.checkForEmptyResults(eventsContainer);
    },
    
    // V√©rifier si un √©v√©nement correspond au filtre de date
    matchesDateFilter: function(eventElement) {
        if (this.state.dateFilter === 'today') {
            // Obtenir la date actuelle au format jj/mm/aaaa
            const today = new Date().toLocaleDateString('fr-FR');
            
            // Trouver le conteneur de date dans l'√©v√©nement
            const dateElement = eventElement.querySelector('.event-date');
            if (dateElement) {
                const eventDate = dateElement.textContent.trim();
                return eventDate === today;
            }
            
            // Fallback √† l'ancienne m√©thode si .event-date n'existe pas
            return eventElement.classList.contains('event-today');
        } else if (this.state.dateFilter === 'week') {
            // Pour le filtre semaine, accepter tous les √©v√©nements
            return true;
        }
        
        return true; // Par d√©faut, accepter tous les √©v√©nements
    },
    
    // Obtenir les dates des 7 prochains jours
    getWeekDates: function() {
        const today = new Date();
        const dates = [];
        
        // Ajouter les 7 prochains jours
        for (let i = 0; i < 7; i++) {
            const date = new Date();
            date.setDate(today.getDate() + i);
            dates.push(date.toLocaleDateString('fr-FR'));
        }
        
        return dates;
    },
    
    // V√©rifier si un √©v√©nement correspond au filtre de cat√©gorie
    matchesCategoryFilter: function(eventElement) {
        if (this.state.categoryFilter === 'all') {
            return true; // Accepter toutes les cat√©gories
        }
        
        // Obtenir le type de l'√©v√©nement
        const eventType = eventElement.getAttribute('data-type');
        
        // Si l'√©v√©nement n'a pas d'attribut data-type, v√©rifier la classe pour le d√©bogage
        if (!eventType) {
            console.warn(`‚ö†Ô∏è √âv√©nement sans attribut data-type: ${eventElement.textContent.substring(0, 30)}...`);
            // Essayer de trouver une classe event-type-*
            const classList = Array.from(eventElement.classList);
            const typeClass = classList.find(cls => cls.startsWith('event-type-'));
            if (typeClass) {
                const typeFromClass = typeClass.replace('event-type-', '');
                return typeFromClass === this.state.categoryFilter;
            }
            return false;
        }
        
        // Log d√©taill√© pour d√©bogage
        if (eventType !== this.state.categoryFilter) {
            console.log(`Type d'√©v√©nement "${eventType}" ne correspond pas au filtre "${this.state.categoryFilter}"`);
        }
        
        // V√©rifier si l'√©v√©nement a la cat√©gorie recherch√©e
        return eventType === this.state.categoryFilter;
    },
    
    // V√©rifier s'il n'y a pas de r√©sultats et afficher un message
    checkForEmptyResults: function(container) {
        let visibleEvents = 0;
        const events = container.querySelectorAll(this.config.eventContainers.itemClass);
        
        events.forEach(event => {
            if (event.style.display !== 'none') {
                visibleEvents++;
            }
        });
        
        // S'il n'y a pas d'√©v√©nements visibles, afficher un message
        let emptyMessage = container.querySelector('.no-events-message');
        
        if (visibleEvents === 0) {
            if (!emptyMessage) {
                emptyMessage = document.createElement('div');
                emptyMessage.className = 'no-events-message col-span-3 text-center py-6';
                emptyMessage.innerHTML = `
                    <i class="fas fa-calendar-times text-gray-400 text-4xl mb-2"></i>
                    <p class="text-gray-400">Aucun √©v√©nement ne correspond aux filtres s√©lectionn√©s</p>
                    <p class="text-xs text-gray-500 mt-2">Cat√©gorie: ${this.state.categoryFilter}, P√©riode: ${this.state.dateFilter}</p>
                `;
                container.appendChild(emptyMessage);
            } else {
                emptyMessage.style.display = 'block';
            }
        } else {
            // Supprimer le message s'il existe
            if (emptyMessage) {
                emptyMessage.style.display = 'none';
            }
        }
    },
    
    // V√©rification du format de date
    checkDateFormat: function() {
        const eventsContainer = document.querySelector(this.config.eventContainers.main);
        if (!eventsContainer) return;
        
        const events = eventsContainer.querySelectorAll(this.config.eventContainers.itemClass);
        const dateFormat = /^\d{2}\/\d{2}\/\d{4}$/; // Format fr-FR: jj/mm/aaaa
        
        let formatCorrect = true;
        let firstDate = '';
        
        events.forEach(event => {
            const dateElement = event.querySelector('.event-date');
            if (dateElement) {
                const dateText = dateElement.textContent.trim();
                if (!firstDate) firstDate = dateText;
                
                if (!dateFormat.test(dateText)) {
                    console.warn(`‚ö†Ô∏è Format de date incorrect: "${dateText}"`);
                    formatCorrect = false;
                }
            }
        });
        
        if (!formatCorrect) {
            console.warn(`‚ö†Ô∏è Certaines dates ne sont pas au format jj/mm/aaaa. Exemple: "${firstDate}"`);
        }
    }
};

// Initialisation au chargement du DOM
document.addEventListener('DOMContentLoaded', function() {
    console.log('üîÑ Chargement du unified-event-filters.js');
    
    // Attendre que tout soit charg√©, puis initialiser
    setTimeout(() => {
        UnifiedEventFilters.init();
        
        // Exposer une fonction de d√©bogage globale
        window.debugFilters = function() {
            if (window.EventFilters) {
                window.EventFilters.debug();
            } else {
                console.error('‚ùå EventFilters n\'est pas initialis√©');
            }
        };
    }, 1000);
});

/**
 * event-test.js
 * Script de test pour valider le fonctionnement des √©v√©nements et filtres
 * Version 1.0 - Avril 2025
 */

// Fonction principale de test
window.testEvents = function() {
  console.group('üß™ TEST COMPLET DU SYST√àME D\'√âV√âNEMENTS');

  // 1. V√©rifier que toutes les d√©pendances sont charg√©es
  const dependencies = [
    { name: 'EventsManager', test: () => window.EventsManager !== undefined },
    { name: 'eventsManager', test: () => window.eventsManager !== undefined },
    { name: 'EventFilters', test: () => window.EventFilters !== undefined },
    { name: 'DateNormalizer', test: () => window.DateNormalizer !== undefined }
  ];

  console.log('1Ô∏è‚É£ V√©rification des d√©pendances:');
  const depResults = {};
  let allDepsOk = true;

  dependencies.forEach(dep => {
    const isLoaded = dep.test();
    depResults[dep.name] = isLoaded ? '‚úÖ' : '‚ùå';
    if (!isLoaded) allDepsOk = false;
    console.log(`  - ${dep.name}: ${isLoaded ? '‚úÖ Charg√©' : '‚ùå Non charg√©'}`);
  });

  if (!allDepsOk) {
    console.error('‚õî Des d√©pendances importantes sont manquantes. Le syst√®me ne fonctionnera pas correctement.');
    console.groupEnd();
    return { 
      success: false, 
      message: 'D√©pendances manquantes', 
      details: depResults 
    };
  }

  // 2. V√©rifier les √©v√©nements dans le DOM
  console.log('2Ô∏è‚É£ V√©rification des √©v√©nements dans le DOM:');
  const eventCards = document.querySelectorAll('.event-card');
  console.log(`  - ${eventCards.length} √©v√©nements trouv√©s dans le DOM`);

  if (eventCards.length === 0) {
    console.error('‚õî Aucun √©v√©nement trouv√© dans le DOM. V√©rifiez l\'initialisation de EventsManager.');
    console.groupEnd();
    return { 
      success: false, 
      message: 'Aucun √©v√©nement trouv√©', 
      details: { eventsCount: 0 } 
    };
  }

  // 3. V√©rifier les attributs des √©v√©nements
  console.log('3Ô∏è‚É£ V√©rification des attributs des √©v√©nements:');
  const attributes = {
    'data-type': 0,
    'data-date': 0,
    '.event-date': 0,
    missingDataType: 0,
    missingDate: 0
  };

  const typeValues = {};
  const dateFormats = new Set();

  eventCards.forEach(card => {
    // V√©rifier data-type
    const type = card.getAttribute('data-type');
    if (type) {
      attributes['data-type']++;
      typeValues[type] = (typeValues[type] || 0) + 1;
    } else {
      attributes.missingDataType++;
    }

    // V√©rifier data-date
    const dataDate = card.getAttribute('data-date');
    if (dataDate) {
      attributes['data-date']++;
    }

    // V√©rifier .event-date
    const dateEl = card.querySelector('.event-date');
    if (dateEl) {
      attributes['.event-date']++;
      dateFormats.add(dateEl.textContent.trim());
    } else {
      attributes.missingDate++;
    }
  });

  const attributesOk = attributes.missingDataType === 0 && attributes.missingDate === 0;
  
  console.log(`  - Attributs data-type: ${attributes['data-type']}/${eventCards.length}`);
  console.log(`  - Attributs data-date: ${attributes['data-date']}/${eventCards.length}`);
  console.log(`  - √âl√©ments .event-date: ${attributes['.event-date']}/${eventCards.length}`);
  console.log(`  - Types d'√©v√©nements trouv√©s: ${Object.keys(typeValues).join(', ')}`);
  console.log(`  - Formats de date trouv√©s: ${[...dateFormats].join(', ')}`);

  if (!attributesOk) {
    console.warn('‚ö†Ô∏è Certains √©v√©nements manquent d\'attributs essentiels.');
  }

  // 4. Tester la compatibilit√© du filtrage
  console.log('4Ô∏è‚É£ Test de compatibilit√© du filtrage:');
  
  // R√©initialiser les filtres pour notre test
  const originalState = window.EventFilters ? {
    dateFilter: window.EventFilters.state.dateFilter,
    categoryFilter: window.EventFilters.state.categoryFilter
  } : null;

  const filterTests = [];

  if (window.EventFilters) {
    // Test du filtre de date
    window.EventFilters.setDateFilter('today');
    const visibleToday = [...eventCards].filter(card => 
      window.getComputedStyle(card).display !== 'none'
    ).length;
    filterTests.push({ test: 'date=today', visible: visibleToday });

    window.EventFilters.setDateFilter('week');
    const visibleWeek = [...eventCards].filter(card => 
      window.getComputedStyle(card).display !== 'none'
    ).length;
    filterTests.push({ test: 'date=week', visible: visibleWeek });

    // Test du filtre de cat√©gorie
    const categories = Object.keys(typeValues);
    categories.forEach(category => {
      window.EventFilters.setCategoryFilter(category);
      const visibleCategory = [...eventCards].filter(card => 
        window.getComputedStyle(card).display !== 'none'
      ).length;
      filterTests.push({ test: `category=${category}`, visible: visibleCategory });
    });

    // Test de combinaison
    window.EventFilters.setDateFilter('today');
    window.EventFilters.setCategoryFilter('all');
    const visibleTodayAll = [...eventCards].filter(card => 
      window.getComputedStyle(card).display !== 'none'
    ).length;
    filterTests.push({ test: 'today+all', visible: visibleTodayAll });

    // Restaurer l'√©tat original
    window.EventFilters.setDateFilter(originalState.dateFilter);
    window.EventFilters.setCategoryFilter(originalState.categoryFilter);
  } else {
    console.warn('‚ö†Ô∏è EventFilters non disponible, filtrage non test√©');
  }

  // Afficher les r√©sultats des tests de filtrage
  if (filterTests.length > 0) {
    console.log('  - R√©sultats des tests de filtrage:');
    filterTests.forEach(test => {
      console.log(`    * ${test.test}: ${test.visible} √©v√©nements visibles`);
    });
    
    // V√©rification logique: week devrait montrer plus ou autant d'√©v√©nements que today
    const todayTest = filterTests.find(t => t.test === 'date=today');
    const weekTest = filterTests.find(t => t.test === 'date=week');
    
    if (todayTest && weekTest) {
      const weekFilterOk = weekTest.visible >= todayTest.visible;
      console.log(`  - Coh√©rence filtre semaine vs jour: ${weekFilterOk ? '‚úÖ OK' : '‚ùå Probl√®me'}`);
      
      if (!weekFilterOk) {
        console.warn('‚ö†Ô∏è Le filtre "week" montre moins d\'√©v√©nements que "today", ce qui est illogique');
      }
    }
  }

  // 5. R√©sum√© et recommandations
  console.log('5Ô∏è‚É£ R√©sum√© du test:');
  
  const hasTypeIssues = attributes.missingDataType > 0;
  const hasDateIssues = attributes.missingDate > 0;
  const filteringOk = filterTests.length > 0;

  const success = !hasTypeIssues && !hasDateIssues && filteringOk;

  console.log(`  - √âv√©nements: ${success ? '‚úÖ' : '‚ùå'} ${eventCards.length} pr√©sents`);
  console.log(`  - Attributs: ${attributesOk ? '‚úÖ' : '‚ùå'} ${hasTypeIssues ? 'Probl√®mes data-type' : ''} ${hasDateIssues ? 'Probl√®mes date' : ''}`);
  console.log(`  - Filtrage: ${filteringOk ? '‚úÖ' : '‚ùå'} ${filterTests.length} tests effectu√©s`);

  // Recommandations
  console.log('6Ô∏è‚É£ Recommandations:');
  
  if (hasTypeIssues || hasDateIssues) {
    console.log('  - ‚ùó Ex√©cutez window.fixEvents() pour r√©parer les attributs manquants');
  }
  
  if (!filteringOk) {
    console.log('  - ‚ùó V√©rifiez l\'initialisation de EventFilters');
  }
  
  if (success) {
    console.log('  - ‚úÖ Le syst√®me d\'√©v√©nements semble fonctionner correctement !');
  }

  console.groupEnd();
  
  // Retourner un rapport complet
  return {
    success,
    dependencies: depResults,
    eventsCount: eventCards.length,
    attributes: {
      dataType: attributes['data-type'],
      dataDate: attributes['data-date'],
      eventDate: attributes['.event-date'],
      missingDataType: attributes.missingDataType,
      missingDate: attributes.missingDate
    },
    types: typeValues,
    dateFormats: [...dateFormats],
    filterTests
  };
};

// Ex√©cuter le test automatiquement apr√®s un d√©lai pour laisser le temps √† tout de se charger
setTimeout(() => {
  console.log('üîç Ex√©cution automatique du test des √©v√©nements...');
  if (document.readyState === 'complete') {
    // Attendre que l'initialisation des √©v√©nements soit termin√©e
    if (document.querySelectorAll('.event-card').length > 0) {
      window.testEvents();
    } else {
      console.log('‚è≥ Attente du chargement des √©v√©nements...');
      // R√©essayer apr√®s un d√©lai
      setTimeout(() => {
        if (document.querySelectorAll('.event-card').length > 0) {
          window.testEvents();
        } else {
          console.warn('‚ö†Ô∏è Les √©v√©nements ne semblent pas se charger. Vous pouvez ex√©cuter window.testEvents() manuellement plus tard.');
        }
      }, 2000);
    }
  } else {
    console.log('‚è≥ Page en cours de chargement, report du test...');
    // R√©essayer quand la page sera compl√®tement charg√©e
    window.addEventListener('load', () => {
      setTimeout(() => {
        window.testEvents();
      }, 1000);
    });
  }
}, 3000);

// Ajouter des alias pour les tests et corriger les fonctions de compatibilit√©
window.verifierEvents = window.testEvents;
window.testFilter = function(category, dateFilter) {
  if (window.EventFilters) {
    // Sauvegarder l'√©tat actuel
    const originalState = {
      dateFilter: window.EventFilters.state.dateFilter,
      categoryFilter: window.EventFilters.state.categoryFilter
    };
    
    // Appliquer les filtres de test
    if (dateFilter) window.EventFilters.setDateFilter(dateFilter);
    if (category) window.EventFilters.setCategoryFilter(category);
    
    // Compter les √©v√©nements visibles
    const visibleCount = [...document.querySelectorAll('.event-card')].filter(
      card => window.getComputedStyle(card).display !== 'none'
    ).length;
    
    console.log(`Test filtre: category=${category || originalState.categoryFilter}, date=${dateFilter || originalState.dateFilter} => ${visibleCount} √©v√©nements visibles`);
    
    // Restaurer l'√©tat original
    window.EventFilters.setDateFilter(originalState.dateFilter);
    window.EventFilters.setCategoryFilter(originalState.categoryFilter);
    
    return visibleCount;
  } else {
    console.error('‚ùå EventFilters non disponible');
    return -1;
  }
};

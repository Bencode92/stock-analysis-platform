"""
Script pour ex√©cuter les tests d'impact et afficher les r√©sultats visuellement

Ce script combine l'ex√©cution du test et sa visualisation dans un navigateur.
"""

import os
import json
import shutil
import webbrowser
import subprocess
from datetime import datetime
import test_impact

# Chemins des fichiers
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
RESULTS_DIR = os.path.join(BASE_DIR, "test_results")
LATEST_RESULTS_PATH = os.path.join(RESULTS_DIR, "impact_test_results_latest.json")
VISUALIZE_HTML_PATH = os.path.join(RESULTS_DIR, "visualize_results.html")

def main():
    """Ex√©cute le test et affiche les r√©sultats"""
    print("üöÄ Ex√©cution des tests d'impact...")
    
    # S'assurer que le r√©pertoire des r√©sultats existe
    os.makedirs(RESULTS_DIR, exist_ok=True)
    
    # Ex√©cuter le test d'impact et obtenir les r√©sultats
    test_impact.main()
    
    # Trouver le fichier de r√©sultats le plus r√©cent
    result_files = [f for f in os.listdir(RESULTS_DIR) if f.startswith("impact_test_results_") and f.endswith(".json")]
    result_files.sort(reverse=True)  # Le plus r√©cent en premier
    
    if not result_files:
        print("‚ùå Aucun fichier de r√©sultats trouv√©.")
        return
    
    latest_file = os.path.join(RESULTS_DIR, result_files[0])
    
    # Copier vers le fichier "latest" pour faciliter l'acc√®s
    try:
        shutil.copy2(latest_file, LATEST_RESULTS_PATH)
        print(f"‚úÖ R√©sultats copi√©s vers: {LATEST_RESULTS_PATH}")
    except Exception as e:
        print(f"‚ùå Erreur lors de la copie du fichier: {e}")
    
    # Ouvrir le fichier HTML dans le navigateur
    if os.path.exists(VISUALIZE_HTML_PATH):
        print(f"üåê Ouverture des r√©sultats dans le navigateur...")
        
        # Ouvrir avec webbrowser (fonctionne pour une utilisation locale)
        webbrowser.open('file://' + os.path.abspath(VISUALIZE_HTML_PATH))
        
        # Alternative: d√©marrer un serveur HTTP simple
        try:
            # D√©terminer le dossier racine (r√©pertoire test_results)
            server_dir = RESULTS_DIR
            
            import http.server
            import socketserver
            import threading
            
            PORT = 8000
            
            class Handler(http.server.SimpleHTTPRequestHandler):
                def __init__(self, *args, **kwargs):
                    super().__init__(*args, directory=server_dir, **kwargs)
            
            def run_server():
                with socketserver.TCPServer(("", PORT), Handler) as httpd:
                    print(f"üåê Serveur d√©marr√© sur le port {PORT}. Ouvrez http://localhost:{PORT}/visualize_results.html")
                    httpd.serve_forever()
            
            # D√©marrer le serveur dans un thread s√©par√©
            server_thread = threading.Thread(target=run_server)
            server_thread.daemon = True
            server_thread.start()
            
            # Ouvrir le navigateur avec l'URL du serveur local
            webbrowser.open(f'http://localhost:{PORT}/visualize_results.html')
            
            # Attendre que l'utilisateur arr√™te le serveur avec Ctrl+C
            try:
                input("\nüëâ Appuyez sur Ctrl+C pour arr√™ter le serveur et quitter...\n")
            except KeyboardInterrupt:
                print("Serveur arr√™t√©.")
        
        except ImportError:
            print("Module serveur HTTP non disponible. Ouverture avec le navigateur uniquement.")
    else:
        print(f"‚ùå Fichier de visualisation non trouv√©: {VISUALIZE_HTML_PATH}")
        print(f"üëâ Ouvrez les r√©sultats manuellement: {latest_file}")

if __name__ == "__main__":
    main()
